// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocr_protobuf.proto
#ifdef USE_STDAFX
#include "stdafx.h"
#endif // USE_STDAFX

#include "ocr_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.h>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ocr_protobuf {
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_ResultPos_PosXY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_ResultPos_PosXYDefaultTypeInternal _OcrResponse_OcrResult_ResultPos_PosXY_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(
    ::_pbi::ConstantInitialized)
  : pos_(){}
struct OcrResponse_OcrResult_ResultPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_ResultPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_ResultPosDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_ResultPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_ResultPosDefaultTypeInternal _OcrResponse_OcrResult_ResultPos_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(
    ::_pbi::ConstantInitialized)
  : one_str_utf8_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , one_pos_(nullptr){}
struct OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_SingleResult_OneResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_SingleResult_OneResultDefaultTypeInternal _OcrResponse_OcrResult_SingleResult_OneResult_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(
    ::_pbi::ConstantInitialized)
  : one_result_()
  , single_str_utf8_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , single_pos_(nullptr)
  , unknown_pos_(nullptr)
  , single_rate_(0)
  , lx_(0)
  , ly_(0)
  , rx_(0)
  , ry_(0)
  , unknown_0_(0){}
struct OcrResponse_OcrResult_SingleResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResult_SingleResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResult_SingleResultDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult_SingleResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResult_SingleResultDefaultTypeInternal _OcrResponse_OcrResult_SingleResult_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse_OcrResult::OcrResponse_OcrResult(
    ::_pbi::ConstantInitialized)
  : single_result_()
  , unknown_1_(0)
  , unknown_2_(0){}
struct OcrResponse_OcrResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponse_OcrResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponse_OcrResultDefaultTypeInternal() {}
  union {
    OcrResponse_OcrResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponse_OcrResultDefaultTypeInternal _OcrResponse_OcrResult_default_instance_;
PROTOBUF_CONSTEXPR OcrResponse::OcrResponse(
    ::_pbi::ConstantInitialized)
  : ocr_result_(nullptr)
  , type_(0)
  , task_id_(0)
  , err_code_(0){}
struct OcrResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrResponseDefaultTypeInternal() {}
  union {
    OcrResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrResponseDefaultTypeInternal _OcrResponse_default_instance_;
PROTOBUF_CONSTEXPR OcrRequest_PicPaths::OcrRequest_PicPaths(
    ::_pbi::ConstantInitialized)
  : pic_path_(){}
struct OcrRequest_PicPathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrRequest_PicPathsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrRequest_PicPathsDefaultTypeInternal() {}
  union {
    OcrRequest_PicPaths _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrRequest_PicPathsDefaultTypeInternal _OcrRequest_PicPaths_default_instance_;
PROTOBUF_CONSTEXPR OcrRequest::OcrRequest(
    ::_pbi::ConstantInitialized)
  : pic_path_(nullptr)
  , unknow_(0)
  , task_id_(0){}
struct OcrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcrRequestDefaultTypeInternal() {}
  union {
    OcrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcrRequestDefaultTypeInternal _OcrRequest_default_instance_;
}  // namespace ocr_protobuf
static ::_pb::Metadata file_level_metadata_ocr_5fprotobuf_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ocr_5fprotobuf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ocr_5fprotobuf_2eproto = nullptr;

const uint32_t TableStruct_ocr_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY, x_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_ResultPos, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult, one_pos_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult, one_str_utf8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, single_pos_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, single_str_utf8_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, single_rate_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, one_result_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, lx_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, ly_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, rx_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, ry_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, unknown_0_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult_SingleResult, unknown_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, single_result_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, unknown_1_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse_OcrResult, unknown_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, type_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, task_id_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrResponse, ocr_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest_PicPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest_PicPaths, pic_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, unknow_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::ocr_protobuf::OcrRequest, pic_path_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY)},
  { 8, -1, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_ResultPos)},
  { 15, -1, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult)},
  { 23, -1, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult_SingleResult)},
  { 39, -1, -1, sizeof(::ocr_protobuf::OcrResponse_OcrResult)},
  { 48, -1, -1, sizeof(::ocr_protobuf::OcrResponse)},
  { 58, -1, -1, sizeof(::ocr_protobuf::OcrRequest_PicPaths)},
  { 65, -1, -1, sizeof(::ocr_protobuf::OcrRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_PosXY_default_instance_._instance,
  &::ocr_protobuf::_OcrResponse_OcrResult_ResultPos_default_instance_._instance,
  &::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_OneResult_default_instance_._instance,
  &::ocr_protobuf::_OcrResponse_OcrResult_SingleResult_default_instance_._instance,
  &::ocr_protobuf::_OcrResponse_OcrResult_default_instance_._instance,
  &::ocr_protobuf::_OcrResponse_default_instance_._instance,
  &::ocr_protobuf::_OcrRequest_PicPaths_default_instance_._instance,
  &::ocr_protobuf::_OcrRequest_default_instance_._instance,
};

const char descriptor_table_protodef_ocr_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ocr_protobuf.proto\022\014ocr_protobuf\"\236\006\n\013O"
  "crResponse\022\014\n\004type\030\001 \001(\005\022\017\n\007task_id\030\002 \001("
  "\005\022\020\n\010err_code\030\003 \001(\005\0227\n\nocr_result\030\004 \001(\0132"
  "#.ocr_protobuf.OcrResponse.OcrResult\032\244\005\n"
  "\tOcrResult\022G\n\rsingle_result\030\001 \003(\01320.ocr_"
  "protobuf.OcrResponse.OcrResult.SingleRes"
  "ult\022\021\n\tunknown_1\030\002 \001(\005\022\021\n\tunknown_2\030\003 \001("
  "\005\032l\n\tResultPos\022@\n\003pos\030\001 \003(\01323.ocr_protob"
  "uf.OcrResponse.OcrResult.ResultPos.PosXY"
  "\032\035\n\005PosXY\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\032\271\003\n\014Sing"
  "leResult\022A\n\nsingle_pos\030\001 \001(\0132-.ocr_proto"
  "buf.OcrResponse.OcrResult.ResultPos\022\027\n\017s"
  "ingle_str_utf8\030\002 \001(\014\022\023\n\013single_rate\030\003 \001("
  "\002\022N\n\none_result\030\004 \003(\0132:.ocr_protobuf.Ocr"
  "Response.OcrResult.SingleResult.OneResul"
  "t\022\n\n\002lx\030\005 \001(\002\022\n\n\002ly\030\006 \001(\002\022\n\n\002rx\030\007 \001(\002\022\n\n"
  "\002ry\030\010 \001(\002\022\021\n\tunknown_0\030\t \001(\005\022B\n\013unknown_"
  "pos\030\n \001(\0132-.ocr_protobuf.OcrResponse.Ocr"
  "Result.ResultPos\032a\n\tOneResult\022>\n\007one_pos"
  "\030\001 \001(\0132-.ocr_protobuf.OcrResponse.OcrRes"
  "ult.ResultPos\022\024\n\014one_str_utf8\030\002 \001(\014\"\200\001\n\n"
  "OcrRequest\022\016\n\006unknow\030\001 \001(\005\022\017\n\007task_id\030\002 "
  "\001(\005\0223\n\010pic_path\030\003 \001(\0132!.ocr_protobuf.Ocr"
  "Request.PicPaths\032\034\n\010PicPaths\022\020\n\010pic_path"
  "\030\001 \003(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ocr_5fprotobuf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ocr_5fprotobuf_2eproto = {
    false, false, 974, descriptor_table_protodef_ocr_5fprotobuf_2eproto,
    "ocr_protobuf.proto",
    &descriptor_table_ocr_5fprotobuf_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_ocr_5fprotobuf_2eproto::offsets,
    file_level_metadata_ocr_5fprotobuf_2eproto, file_level_enum_descriptors_ocr_5fprotobuf_2eproto,
    file_level_service_descriptors_ocr_5fprotobuf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ocr_5fprotobuf_2eproto_getter() {
  return &descriptor_table_ocr_5fprotobuf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ocr_5fprotobuf_2eproto(&descriptor_table_ocr_5fprotobuf_2eproto);
namespace ocr_protobuf {

// ===================================================================

class OcrResponse_OcrResult_ResultPos_PosXY::_Internal {
 public:
};

OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
}
OcrResponse_OcrResult_ResultPos_PosXY::OcrResponse_OcrResult_ResultPos_PosXY(const OcrResponse_OcrResult_ResultPos_PosXY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
}

inline void OcrResponse_OcrResult_ResultPos_PosXY::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

OcrResponse_OcrResult_ResultPos_PosXY::~OcrResponse_OcrResult_ResultPos_PosXY() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_ResultPos_PosXY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OcrResponse_OcrResult_ResultPos_PosXY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrResponse_OcrResult_ResultPos_PosXY::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrResponse_OcrResult_ResultPos_PosXY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_ResultPos_PosXY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  return target;
}

size_t OcrResponse_OcrResult_ResultPos_PosXY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrResponse_OcrResult_ResultPos_PosXY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrResponse_OcrResult_ResultPos_PosXY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrResponse_OcrResult_ResultPos_PosXY::GetClassData() const { return &_class_data_; }

void OcrResponse_OcrResult_ResultPos_PosXY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrResponse_OcrResult_ResultPos_PosXY *>(to)->MergeFrom(
      static_cast<const OcrResponse_OcrResult_ResultPos_PosXY &>(from));
}


void OcrResponse_OcrResult_ResultPos_PosXY::MergeFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrResponse_OcrResult_ResultPos_PosXY::CopyFrom(const OcrResponse_OcrResult_ResultPos_PosXY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_ResultPos_PosXY::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_ResultPos_PosXY::InternalSwap(OcrResponse_OcrResult_ResultPos_PosXY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_ResultPos_PosXY, y_)
      + sizeof(OcrResponse_OcrResult_ResultPos_PosXY::y_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_ResultPos_PosXY, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_ResultPos_PosXY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[0]);
}

// ===================================================================

class OcrResponse_OcrResult_ResultPos::_Internal {
 public:
};

OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
}
OcrResponse_OcrResult_ResultPos::OcrResponse_OcrResult_ResultPos(const OcrResponse_OcrResult_ResultPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pos_(from.pos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
}

inline void OcrResponse_OcrResult_ResultPos::SharedCtor() {
}

OcrResponse_OcrResult_ResultPos::~OcrResponse_OcrResult_ResultPos() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_ResultPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OcrResponse_OcrResult_ResultPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrResponse_OcrResult_ResultPos::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrResponse_OcrResult_ResultPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_ResultPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  return target;
}

size_t OcrResponse_OcrResult_ResultPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.ResultPos.PosXY pos = 1;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrResponse_OcrResult_ResultPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrResponse_OcrResult_ResultPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrResponse_OcrResult_ResultPos::GetClassData() const { return &_class_data_; }

void OcrResponse_OcrResult_ResultPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrResponse_OcrResult_ResultPos *>(to)->MergeFrom(
      static_cast<const OcrResponse_OcrResult_ResultPos &>(from));
}


void OcrResponse_OcrResult_ResultPos::MergeFrom(const OcrResponse_OcrResult_ResultPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrResponse_OcrResult_ResultPos::CopyFrom(const OcrResponse_OcrResult_ResultPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.ResultPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_ResultPos::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_ResultPos::InternalSwap(OcrResponse_OcrResult_ResultPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pos_.InternalSwap(&other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_ResultPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[1]);
}

// ===================================================================

class OcrResponse_OcrResult_SingleResult_OneResult::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& one_pos(const OcrResponse_OcrResult_SingleResult_OneResult* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult_OneResult::_Internal::one_pos(const OcrResponse_OcrResult_SingleResult_OneResult* msg) {
  return *msg->one_pos_;
}
OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
}
OcrResponse_OcrResult_SingleResult_OneResult::OcrResponse_OcrResult_SingleResult_OneResult(const OcrResponse_OcrResult_SingleResult_OneResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  one_str_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    one_str_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_one_str_utf8().empty()) {
    one_str_utf8_.Set(from._internal_one_str_utf8(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_one_pos()) {
    one_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from.one_pos_);
  } else {
    one_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
}

inline void OcrResponse_OcrResult_SingleResult_OneResult::SharedCtor() {
one_str_utf8_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  one_str_utf8_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
one_pos_ = nullptr;
}

OcrResponse_OcrResult_SingleResult_OneResult::~OcrResponse_OcrResult_SingleResult_OneResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_SingleResult_OneResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  one_str_utf8_.Destroy();
  if (this != internal_default_instance()) delete one_pos_;
}

void OcrResponse_OcrResult_SingleResult_OneResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrResponse_OcrResult_SingleResult_OneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_str_utf8_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && one_pos_ != nullptr) {
    delete one_pos_;
  }
  one_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrResponse_OcrResult_SingleResult_OneResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes one_str_utf8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_one_str_utf8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_SingleResult_OneResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  if (this->_internal_has_one_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::one_pos(this),
        _Internal::one_pos(this).GetCachedSize(), target, stream);
  }

  // bytes one_str_utf8 = 2;
  if (!this->_internal_one_str_utf8().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_one_str_utf8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  return target;
}

size_t OcrResponse_OcrResult_SingleResult_OneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes one_str_utf8 = 2;
  if (!this->_internal_one_str_utf8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_one_str_utf8());
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos one_pos = 1;
  if (this->_internal_has_one_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *one_pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrResponse_OcrResult_SingleResult_OneResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrResponse_OcrResult_SingleResult_OneResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrResponse_OcrResult_SingleResult_OneResult::GetClassData() const { return &_class_data_; }

void OcrResponse_OcrResult_SingleResult_OneResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrResponse_OcrResult_SingleResult_OneResult *>(to)->MergeFrom(
      static_cast<const OcrResponse_OcrResult_SingleResult_OneResult &>(from));
}


void OcrResponse_OcrResult_SingleResult_OneResult::MergeFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_one_str_utf8().empty()) {
    _internal_set_one_str_utf8(from._internal_one_str_utf8());
  }
  if (from._internal_has_one_pos()) {
    _internal_mutable_one_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(from._internal_one_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrResponse_OcrResult_SingleResult_OneResult::CopyFrom(const OcrResponse_OcrResult_SingleResult_OneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_SingleResult_OneResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_SingleResult_OneResult::InternalSwap(OcrResponse_OcrResult_SingleResult_OneResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &one_str_utf8_, lhs_arena,
      &other->one_str_utf8_, rhs_arena
  );
  swap(one_pos_, other->one_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_SingleResult_OneResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[2]);
}

// ===================================================================

class OcrResponse_OcrResult_SingleResult::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& single_pos(const OcrResponse_OcrResult_SingleResult* msg);
  static const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos& unknown_pos(const OcrResponse_OcrResult_SingleResult* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult::_Internal::single_pos(const OcrResponse_OcrResult_SingleResult* msg) {
  return *msg->single_pos_;
}
const ::ocr_protobuf::OcrResponse_OcrResult_ResultPos&
OcrResponse_OcrResult_SingleResult::_Internal::unknown_pos(const OcrResponse_OcrResult_SingleResult* msg) {
  return *msg->unknown_pos_;
}
OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  one_result_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
}
OcrResponse_OcrResult_SingleResult::OcrResponse_OcrResult_SingleResult(const OcrResponse_OcrResult_SingleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      one_result_(from.one_result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  single_str_utf8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    single_str_utf8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_single_str_utf8().empty()) {
    single_str_utf8_.Set(from._internal_single_str_utf8(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_single_pos()) {
    single_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from.single_pos_);
  } else {
    single_pos_ = nullptr;
  }
  if (from._internal_has_unknown_pos()) {
    unknown_pos_ = new ::ocr_protobuf::OcrResponse_OcrResult_ResultPos(*from.unknown_pos_);
  } else {
    unknown_pos_ = nullptr;
  }
  ::memcpy(&single_rate_, &from.single_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_0_) -
    reinterpret_cast<char*>(&single_rate_)) + sizeof(unknown_0_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
}

inline void OcrResponse_OcrResult_SingleResult::SharedCtor() {
single_str_utf8_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  single_str_utf8_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&single_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unknown_0_) -
    reinterpret_cast<char*>(&single_pos_)) + sizeof(unknown_0_));
}

OcrResponse_OcrResult_SingleResult::~OcrResponse_OcrResult_SingleResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult_SingleResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  single_str_utf8_.Destroy();
  if (this != internal_default_instance()) delete single_pos_;
  if (this != internal_default_instance()) delete unknown_pos_;
}

void OcrResponse_OcrResult_SingleResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrResponse_OcrResult_SingleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  one_result_.Clear();
  single_str_utf8_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && single_pos_ != nullptr) {
    delete single_pos_;
  }
  single_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unknown_pos_ != nullptr) {
    delete unknown_pos_;
  }
  unknown_pos_ = nullptr;
  ::memset(&single_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_0_) -
      reinterpret_cast<char*>(&single_rate_)) + sizeof(unknown_0_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrResponse_OcrResult_SingleResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes single_str_utf8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_single_str_utf8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float single_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          single_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float lx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          lx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ly = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ly_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ry = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          unknown_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unknown_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult_SingleResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  if (this->_internal_has_single_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::single_pos(this),
        _Internal::single_pos(this).GetCachedSize(), target, stream);
  }

  // bytes single_str_utf8 = 2;
  if (!this->_internal_single_str_utf8().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_single_str_utf8(), target);
  }

  // float single_rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_single_rate = this->_internal_single_rate();
  uint32_t raw_single_rate;
  memcpy(&raw_single_rate, &tmp_single_rate, sizeof(tmp_single_rate));
  if (raw_single_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_single_rate(), target);
  }

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_one_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_one_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float lx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lx = this->_internal_lx();
  uint32_t raw_lx;
  memcpy(&raw_lx, &tmp_lx, sizeof(tmp_lx));
  if (raw_lx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_lx(), target);
  }

  // float ly = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ly = this->_internal_ly();
  uint32_t raw_ly;
  memcpy(&raw_ly, &tmp_ly, sizeof(tmp_ly));
  if (raw_ly != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ly(), target);
  }

  // float rx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = this->_internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_rx(), target);
  }

  // float ry = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_ry(), target);
  }

  // int32 unknown_0 = 9;
  if (this->_internal_unknown_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_unknown_0(), target);
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  if (this->_internal_has_unknown_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::unknown_pos(this),
        _Internal::unknown_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  return target;
}

size_t OcrResponse_OcrResult_SingleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult.OneResult one_result = 4;
  total_size += 1UL * this->_internal_one_result_size();
  for (const auto& msg : this->one_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes single_str_utf8 = 2;
  if (!this->_internal_single_str_utf8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_single_str_utf8());
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos single_pos = 1;
  if (this->_internal_has_single_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_pos_);
  }

  // .ocr_protobuf.OcrResponse.OcrResult.ResultPos unknown_pos = 10;
  if (this->_internal_has_unknown_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unknown_pos_);
  }

  // float single_rate = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_single_rate = this->_internal_single_rate();
  uint32_t raw_single_rate;
  memcpy(&raw_single_rate, &tmp_single_rate, sizeof(tmp_single_rate));
  if (raw_single_rate != 0) {
    total_size += 1 + 4;
  }

  // float lx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lx = this->_internal_lx();
  uint32_t raw_lx;
  memcpy(&raw_lx, &tmp_lx, sizeof(tmp_lx));
  if (raw_lx != 0) {
    total_size += 1 + 4;
  }

  // float ly = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ly = this->_internal_ly();
  uint32_t raw_ly;
  memcpy(&raw_ly, &tmp_ly, sizeof(tmp_ly));
  if (raw_ly != 0) {
    total_size += 1 + 4;
  }

  // float rx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = this->_internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 4;
  }

  // float ry = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 4;
  }

  // int32 unknown_0 = 9;
  if (this->_internal_unknown_0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_0());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrResponse_OcrResult_SingleResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrResponse_OcrResult_SingleResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrResponse_OcrResult_SingleResult::GetClassData() const { return &_class_data_; }

void OcrResponse_OcrResult_SingleResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrResponse_OcrResult_SingleResult *>(to)->MergeFrom(
      static_cast<const OcrResponse_OcrResult_SingleResult &>(from));
}


void OcrResponse_OcrResult_SingleResult::MergeFrom(const OcrResponse_OcrResult_SingleResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  one_result_.MergeFrom(from.one_result_);
  if (!from._internal_single_str_utf8().empty()) {
    _internal_set_single_str_utf8(from._internal_single_str_utf8());
  }
  if (from._internal_has_single_pos()) {
    _internal_mutable_single_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(from._internal_single_pos());
  }
  if (from._internal_has_unknown_pos()) {
    _internal_mutable_unknown_pos()->::ocr_protobuf::OcrResponse_OcrResult_ResultPos::MergeFrom(from._internal_unknown_pos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_single_rate = from._internal_single_rate();
  uint32_t raw_single_rate;
  memcpy(&raw_single_rate, &tmp_single_rate, sizeof(tmp_single_rate));
  if (raw_single_rate != 0) {
    _internal_set_single_rate(from._internal_single_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lx = from._internal_lx();
  uint32_t raw_lx;
  memcpy(&raw_lx, &tmp_lx, sizeof(tmp_lx));
  if (raw_lx != 0) {
    _internal_set_lx(from._internal_lx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ly = from._internal_ly();
  uint32_t raw_ly;
  memcpy(&raw_ly, &tmp_ly, sizeof(tmp_ly));
  if (raw_ly != 0) {
    _internal_set_ly(from._internal_ly());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = from._internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = from._internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _internal_set_ry(from._internal_ry());
  }
  if (from._internal_unknown_0() != 0) {
    _internal_set_unknown_0(from._internal_unknown_0());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrResponse_OcrResult_SingleResult::CopyFrom(const OcrResponse_OcrResult_SingleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult.SingleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult_SingleResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult_SingleResult::InternalSwap(OcrResponse_OcrResult_SingleResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  one_result_.InternalSwap(&other->one_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &single_str_utf8_, lhs_arena,
      &other->single_str_utf8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_SingleResult, unknown_0_)
      + sizeof(OcrResponse_OcrResult_SingleResult::unknown_0_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult_SingleResult, single_pos_)>(
          reinterpret_cast<char*>(&single_pos_),
          reinterpret_cast<char*>(&other->single_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult_SingleResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[3]);
}

// ===================================================================

class OcrResponse_OcrResult::_Internal {
 public:
};

OcrResponse_OcrResult::OcrResponse_OcrResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  single_result_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse.OcrResult)
}
OcrResponse_OcrResult::OcrResponse_OcrResult(const OcrResponse_OcrResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      single_result_(from.single_result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unknown_1_, &from.unknown_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_2_) -
    reinterpret_cast<char*>(&unknown_1_)) + sizeof(unknown_2_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse.OcrResult)
}

inline void OcrResponse_OcrResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unknown_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unknown_2_) -
    reinterpret_cast<char*>(&unknown_1_)) + sizeof(unknown_2_));
}

OcrResponse_OcrResult::~OcrResponse_OcrResult() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse.OcrResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse_OcrResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OcrResponse_OcrResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrResponse_OcrResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse.OcrResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_result_.Clear();
  ::memset(&unknown_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_2_) -
      reinterpret_cast<char*>(&unknown_1_)) + sizeof(unknown_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrResponse_OcrResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_single_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          unknown_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          unknown_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse_OcrResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse.OcrResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_single_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_single_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 unknown_1 = 2;
  if (this->_internal_unknown_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unknown_1(), target);
  }

  // int32 unknown_2 = 3;
  if (this->_internal_unknown_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_unknown_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse.OcrResult)
  return target;
}

size_t OcrResponse_OcrResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse.OcrResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ocr_protobuf.OcrResponse.OcrResult.SingleResult single_result = 1;
  total_size += 1UL * this->_internal_single_result_size();
  for (const auto& msg : this->single_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 unknown_1 = 2;
  if (this->_internal_unknown_1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_1());
  }

  // int32 unknown_2 = 3;
  if (this->_internal_unknown_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrResponse_OcrResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrResponse_OcrResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrResponse_OcrResult::GetClassData() const { return &_class_data_; }

void OcrResponse_OcrResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrResponse_OcrResult *>(to)->MergeFrom(
      static_cast<const OcrResponse_OcrResult &>(from));
}


void OcrResponse_OcrResult::MergeFrom(const OcrResponse_OcrResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse.OcrResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  single_result_.MergeFrom(from.single_result_);
  if (from._internal_unknown_1() != 0) {
    _internal_set_unknown_1(from._internal_unknown_1());
  }
  if (from._internal_unknown_2() != 0) {
    _internal_set_unknown_2(from._internal_unknown_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrResponse_OcrResult::CopyFrom(const OcrResponse_OcrResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse.OcrResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse_OcrResult::IsInitialized() const {
  return true;
}

void OcrResponse_OcrResult::InternalSwap(OcrResponse_OcrResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  single_result_.InternalSwap(&other->single_result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult, unknown_2_)
      + sizeof(OcrResponse_OcrResult::unknown_2_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse_OcrResult, unknown_1_)>(
          reinterpret_cast<char*>(&unknown_1_),
          reinterpret_cast<char*>(&other->unknown_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse_OcrResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[4]);
}

// ===================================================================

class OcrResponse::_Internal {
 public:
  static const ::ocr_protobuf::OcrResponse_OcrResult& ocr_result(const OcrResponse* msg);
};

const ::ocr_protobuf::OcrResponse_OcrResult&
OcrResponse::_Internal::ocr_result(const OcrResponse* msg) {
  return *msg->ocr_result_;
}
OcrResponse::OcrResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrResponse)
}
OcrResponse::OcrResponse(const OcrResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ocr_result()) {
    ocr_result_ = new ::ocr_protobuf::OcrResponse_OcrResult(*from.ocr_result_);
  } else {
    ocr_result_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&type_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrResponse)
}

inline void OcrResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ocr_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&ocr_result_)) + sizeof(err_code_));
}

OcrResponse::~OcrResponse() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ocr_result_;
}

void OcrResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ocr_result_ != nullptr) {
    delete ocr_result_;
  }
  ocr_result_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&type_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ocr_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  if (this->_internal_has_ocr_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ocr_result(this),
        _Internal::ocr_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrResponse)
  return target;
}

size_t OcrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ocr_protobuf.OcrResponse.OcrResult ocr_result = 4;
  if (this->_internal_has_ocr_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ocr_result_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 err_code = 3;
  if (this->_internal_err_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrResponse::GetClassData() const { return &_class_data_; }

void OcrResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrResponse *>(to)->MergeFrom(
      static_cast<const OcrResponse &>(from));
}


void OcrResponse::MergeFrom(const OcrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ocr_result()) {
    _internal_mutable_ocr_result()->::ocr_protobuf::OcrResponse_OcrResult::MergeFrom(from._internal_ocr_result());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrResponse::CopyFrom(const OcrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrResponse::IsInitialized() const {
  return true;
}

void OcrResponse::InternalSwap(OcrResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrResponse, err_code_)
      + sizeof(OcrResponse::err_code_)
      - PROTOBUF_FIELD_OFFSET(OcrResponse, ocr_result_)>(
          reinterpret_cast<char*>(&ocr_result_),
          reinterpret_cast<char*>(&other->ocr_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[5]);
}

// ===================================================================

class OcrRequest_PicPaths::_Internal {
 public:
};

OcrRequest_PicPaths::OcrRequest_PicPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pic_path_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrRequest.PicPaths)
}
OcrRequest_PicPaths::OcrRequest_PicPaths(const OcrRequest_PicPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pic_path_(from.pic_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrRequest.PicPaths)
}

inline void OcrRequest_PicPaths::SharedCtor() {
}

OcrRequest_PicPaths::~OcrRequest_PicPaths() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrRequest.PicPaths)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrRequest_PicPaths::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OcrRequest_PicPaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrRequest_PicPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrRequest.PicPaths)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pic_path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrRequest_PicPaths::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pic_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pic_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ocr_protobuf.OcrRequest.PicPaths.pic_path"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrRequest_PicPaths::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrRequest.PicPaths)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pic_path = 1;
  for (int i = 0, n = this->_internal_pic_path_size(); i < n; i++) {
    const auto& s = this->_internal_pic_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ocr_protobuf.OcrRequest.PicPaths.pic_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrRequest.PicPaths)
  return target;
}

size_t OcrRequest_PicPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrRequest.PicPaths)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pic_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pic_path_.size());
  for (int i = 0, n = pic_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pic_path_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrRequest_PicPaths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrRequest_PicPaths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrRequest_PicPaths::GetClassData() const { return &_class_data_; }

void OcrRequest_PicPaths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrRequest_PicPaths *>(to)->MergeFrom(
      static_cast<const OcrRequest_PicPaths &>(from));
}


void OcrRequest_PicPaths::MergeFrom(const OcrRequest_PicPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrRequest.PicPaths)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pic_path_.MergeFrom(from.pic_path_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrRequest_PicPaths::CopyFrom(const OcrRequest_PicPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrRequest.PicPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest_PicPaths::IsInitialized() const {
  return true;
}

void OcrRequest_PicPaths::InternalSwap(OcrRequest_PicPaths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pic_path_.InternalSwap(&other->pic_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrRequest_PicPaths::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[6]);
}

// ===================================================================

class OcrRequest::_Internal {
 public:
  static const ::ocr_protobuf::OcrRequest_PicPaths& pic_path(const OcrRequest* msg);
};

const ::ocr_protobuf::OcrRequest_PicPaths&
OcrRequest::_Internal::pic_path(const OcrRequest* msg) {
  return *msg->pic_path_;
}
OcrRequest::OcrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ocr_protobuf.OcrRequest)
}
OcrRequest::OcrRequest(const OcrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pic_path()) {
    pic_path_ = new ::ocr_protobuf::OcrRequest_PicPaths(*from.pic_path_);
  } else {
    pic_path_ = nullptr;
  }
  ::memcpy(&unknow_, &from.unknow_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&unknow_)) + sizeof(task_id_));
  // @@protoc_insertion_point(copy_constructor:ocr_protobuf.OcrRequest)
}

inline void OcrRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pic_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_id_) -
    reinterpret_cast<char*>(&pic_path_)) + sizeof(task_id_));
}

OcrRequest::~OcrRequest() {
  // @@protoc_insertion_point(destructor:ocr_protobuf.OcrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OcrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pic_path_;
}

void OcrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OcrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ocr_protobuf.OcrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pic_path_ != nullptr) {
    delete pic_path_;
  }
  pic_path_ = nullptr;
  ::memset(&unknow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&unknow_)) + sizeof(task_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OcrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unknow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          unknow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pic_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OcrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocr_protobuf.OcrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unknow = 1;
  if (this->_internal_unknow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_unknow(), target);
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  if (this->_internal_has_pic_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pic_path(this),
        _Internal::pic_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocr_protobuf.OcrRequest)
  return target;
}

size_t OcrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ocr_protobuf.OcrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ocr_protobuf.OcrRequest.PicPaths pic_path = 3;
  if (this->_internal_has_pic_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pic_path_);
  }

  // int32 unknow = 1;
  if (this->_internal_unknow() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknow());
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OcrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OcrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OcrRequest::GetClassData() const { return &_class_data_; }

void OcrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OcrRequest *>(to)->MergeFrom(
      static_cast<const OcrRequest &>(from));
}


void OcrRequest::MergeFrom(const OcrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ocr_protobuf.OcrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pic_path()) {
    _internal_mutable_pic_path()->::ocr_protobuf::OcrRequest_PicPaths::MergeFrom(from._internal_pic_path());
  }
  if (from._internal_unknow() != 0) {
    _internal_set_unknow(from._internal_unknow());
  }
  if (from._internal_task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OcrRequest::CopyFrom(const OcrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ocr_protobuf.OcrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OcrRequest::IsInitialized() const {
  return true;
}

void OcrRequest::InternalSwap(OcrRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcrRequest, task_id_)
      + sizeof(OcrRequest::task_id_)
      - PROTOBUF_FIELD_OFFSET(OcrRequest, pic_path_)>(
          reinterpret_cast<char*>(&pic_path_),
          reinterpret_cast<char*>(&other->pic_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OcrRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ocr_5fprotobuf_2eproto_getter, &descriptor_table_ocr_5fprotobuf_2eproto_once,
      file_level_metadata_ocr_5fprotobuf_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ocr_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos_PosXY >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_ResultPos*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_ResultPos >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult_OneResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult_SingleResult*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult_SingleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse_OcrResult*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse_OcrResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse_OcrResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrResponse*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrRequest_PicPaths*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrRequest_PicPaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrRequest_PicPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::ocr_protobuf::OcrRequest*
Arena::CreateMaybeMessage< ::ocr_protobuf::OcrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ocr_protobuf::OcrRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

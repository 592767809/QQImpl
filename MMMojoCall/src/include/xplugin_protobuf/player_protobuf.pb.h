// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_player_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_player_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_player_5fprotobuf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_5fprotobuf_2eproto;
namespace player_protobuf {
class AudioMutePlayerCoreMessage;
struct AudioMutePlayerCoreMessageDefaultTypeInternal;
extern AudioMutePlayerCoreMessageDefaultTypeInternal _AudioMutePlayerCoreMessage_default_instance_;
class AudioVolumePlayerCoreMessage;
struct AudioVolumePlayerCoreMessageDefaultTypeInternal;
extern AudioVolumePlayerCoreMessageDefaultTypeInternal _AudioVolumePlayerCoreMessage_default_instance_;
class CloseRequestProxyMessage;
struct CloseRequestProxyMessageDefaultTypeInternal;
extern CloseRequestProxyMessageDefaultTypeInternal _CloseRequestProxyMessage_default_instance_;
class CreatePlayerCoreReqMessage;
struct CreatePlayerCoreReqMessageDefaultTypeInternal;
extern CreatePlayerCoreReqMessageDefaultTypeInternal _CreatePlayerCoreReqMessage_default_instance_;
class CreatePlayerCoreRespMessage;
struct CreatePlayerCoreRespMessageDefaultTypeInternal;
extern CreatePlayerCoreRespMessageDefaultTypeInternal _CreatePlayerCoreRespMessage_default_instance_;
class CurrentPositionMsInfo;
struct CurrentPositionMsInfoDefaultTypeInternal;
extern CurrentPositionMsInfoDefaultTypeInternal _CurrentPositionMsInfo_default_instance_;
class CurrentPositionMsInfo_MsInfo;
struct CurrentPositionMsInfo_MsInfoDefaultTypeInternal;
extern CurrentPositionMsInfo_MsInfoDefaultTypeInternal _CurrentPositionMsInfo_MsInfo_default_instance_;
class CurrentPositionMsMessage;
struct CurrentPositionMsMessageDefaultTypeInternal;
extern CurrentPositionMsMessageDefaultTypeInternal _CurrentPositionMsMessage_default_instance_;
class DownloadDataSourceCoreMessage;
struct DownloadDataSourceCoreMessageDefaultTypeInternal;
extern DownloadDataSourceCoreMessageDefaultTypeInternal _DownloadDataSourceCoreMessage_default_instance_;
class ErrorPlayerCoreMessage;
struct ErrorPlayerCoreMessageDefaultTypeInternal;
extern ErrorPlayerCoreMessageDefaultTypeInternal _ErrorPlayerCoreMessage_default_instance_;
class InfoPlayerCoreMessage;
struct InfoPlayerCoreMessageDefaultTypeInternal;
extern InfoPlayerCoreMessageDefaultTypeInternal _InfoPlayerCoreMessage_default_instance_;
class InitPlayerCoreMessage;
struct InitPlayerCoreMessageDefaultTypeInternal;
extern InitPlayerCoreMessageDefaultTypeInternal _InitPlayerCoreMessage_default_instance_;
class InitReqMessage;
struct InitReqMessageDefaultTypeInternal;
extern InitReqMessageDefaultTypeInternal _InitReqMessage_default_instance_;
class InitRespMessage;
struct InitRespMessageDefaultTypeInternal;
extern InitRespMessageDefaultTypeInternal _InitRespMessage_default_instance_;
class PlayerIdMessage;
struct PlayerIdMessageDefaultTypeInternal;
extern PlayerIdMessageDefaultTypeInternal _PlayerIdMessage_default_instance_;
class PollingDataProxyReqMessage;
struct PollingDataProxyReqMessageDefaultTypeInternal;
extern PollingDataProxyReqMessageDefaultTypeInternal _PollingDataProxyReqMessage_default_instance_;
class PollingDataProxyRespMessage;
struct PollingDataProxyRespMessageDefaultTypeInternal;
extern PollingDataProxyRespMessageDefaultTypeInternal _PollingDataProxyRespMessage_default_instance_;
class PreparePlayerCoreMessage;
struct PreparePlayerCoreMessageDefaultTypeInternal;
extern PreparePlayerCoreMessageDefaultTypeInternal _PreparePlayerCoreMessage_default_instance_;
class ReadyDataSourceCoreMessage;
struct ReadyDataSourceCoreMessageDefaultTypeInternal;
extern ReadyDataSourceCoreMessageDefaultTypeInternal _ReadyDataSourceCoreMessage_default_instance_;
class RepeatPlayerCoreMessage;
struct RepeatPlayerCoreMessageDefaultTypeInternal;
extern RepeatPlayerCoreMessageDefaultTypeInternal _RepeatPlayerCoreMessage_default_instance_;
class ResizePlayerCoreMessage;
struct ResizePlayerCoreMessageDefaultTypeInternal;
extern ResizePlayerCoreMessageDefaultTypeInternal _ResizePlayerCoreMessage_default_instance_;
class SeekToPlayerCoreMessage;
struct SeekToPlayerCoreMessageDefaultTypeInternal;
extern SeekToPlayerCoreMessageDefaultTypeInternal _SeekToPlayerCoreMessage_default_instance_;
class SpeedRatioPlayerCoreMessage;
struct SpeedRatioPlayerCoreMessageDefaultTypeInternal;
extern SpeedRatioPlayerCoreMessageDefaultTypeInternal _SpeedRatioPlayerCoreMessage_default_instance_;
class StartRequestProxyMessage;
struct StartRequestProxyMessageDefaultTypeInternal;
extern StartRequestProxyMessageDefaultTypeInternal _StartRequestProxyMessage_default_instance_;
class StartTaskProxyMessage;
struct StartTaskProxyMessageDefaultTypeInternal;
extern StartTaskProxyMessageDefaultTypeInternal _StartTaskProxyMessage_default_instance_;
class StatePlayerCoreMessage;
struct StatePlayerCoreMessageDefaultTypeInternal;
extern StatePlayerCoreMessageDefaultTypeInternal _StatePlayerCoreMessage_default_instance_;
class VideoSizeChangedPlayerCoreMessage;
struct VideoSizeChangedPlayerCoreMessageDefaultTypeInternal;
extern VideoSizeChangedPlayerCoreMessageDefaultTypeInternal _VideoSizeChangedPlayerCoreMessage_default_instance_;
class VideoSurfaceMessage;
struct VideoSurfaceMessageDefaultTypeInternal;
extern VideoSurfaceMessageDefaultTypeInternal _VideoSurfaceMessage_default_instance_;
}  // namespace player_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::player_protobuf::AudioMutePlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::AudioMutePlayerCoreMessage>(Arena*);
template<> ::player_protobuf::AudioVolumePlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::AudioVolumePlayerCoreMessage>(Arena*);
template<> ::player_protobuf::CloseRequestProxyMessage* Arena::CreateMaybeMessage<::player_protobuf::CloseRequestProxyMessage>(Arena*);
template<> ::player_protobuf::CreatePlayerCoreReqMessage* Arena::CreateMaybeMessage<::player_protobuf::CreatePlayerCoreReqMessage>(Arena*);
template<> ::player_protobuf::CreatePlayerCoreRespMessage* Arena::CreateMaybeMessage<::player_protobuf::CreatePlayerCoreRespMessage>(Arena*);
template<> ::player_protobuf::CurrentPositionMsInfo* Arena::CreateMaybeMessage<::player_protobuf::CurrentPositionMsInfo>(Arena*);
template<> ::player_protobuf::CurrentPositionMsInfo_MsInfo* Arena::CreateMaybeMessage<::player_protobuf::CurrentPositionMsInfo_MsInfo>(Arena*);
template<> ::player_protobuf::CurrentPositionMsMessage* Arena::CreateMaybeMessage<::player_protobuf::CurrentPositionMsMessage>(Arena*);
template<> ::player_protobuf::DownloadDataSourceCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::DownloadDataSourceCoreMessage>(Arena*);
template<> ::player_protobuf::ErrorPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::ErrorPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::InfoPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::InfoPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::InitPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::InitPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::InitReqMessage* Arena::CreateMaybeMessage<::player_protobuf::InitReqMessage>(Arena*);
template<> ::player_protobuf::InitRespMessage* Arena::CreateMaybeMessage<::player_protobuf::InitRespMessage>(Arena*);
template<> ::player_protobuf::PlayerIdMessage* Arena::CreateMaybeMessage<::player_protobuf::PlayerIdMessage>(Arena*);
template<> ::player_protobuf::PollingDataProxyReqMessage* Arena::CreateMaybeMessage<::player_protobuf::PollingDataProxyReqMessage>(Arena*);
template<> ::player_protobuf::PollingDataProxyRespMessage* Arena::CreateMaybeMessage<::player_protobuf::PollingDataProxyRespMessage>(Arena*);
template<> ::player_protobuf::PreparePlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::PreparePlayerCoreMessage>(Arena*);
template<> ::player_protobuf::ReadyDataSourceCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::ReadyDataSourceCoreMessage>(Arena*);
template<> ::player_protobuf::RepeatPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::RepeatPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::ResizePlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::ResizePlayerCoreMessage>(Arena*);
template<> ::player_protobuf::SeekToPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::SeekToPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::SpeedRatioPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::SpeedRatioPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::StartRequestProxyMessage* Arena::CreateMaybeMessage<::player_protobuf::StartRequestProxyMessage>(Arena*);
template<> ::player_protobuf::StartTaskProxyMessage* Arena::CreateMaybeMessage<::player_protobuf::StartTaskProxyMessage>(Arena*);
template<> ::player_protobuf::StatePlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::StatePlayerCoreMessage>(Arena*);
template<> ::player_protobuf::VideoSizeChangedPlayerCoreMessage* Arena::CreateMaybeMessage<::player_protobuf::VideoSizeChangedPlayerCoreMessage>(Arena*);
template<> ::player_protobuf::VideoSurfaceMessage* Arena::CreateMaybeMessage<::player_protobuf::VideoSurfaceMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace player_protobuf {

// ===================================================================

class InitReqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.InitReqMessage) */ {
 public:
  inline InitReqMessage() : InitReqMessage(nullptr) {}
  ~InitReqMessage() override;
  explicit PROTOBUF_CONSTEXPR InitReqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitReqMessage(const InitReqMessage& from);
  InitReqMessage(InitReqMessage&& from) noexcept
    : InitReqMessage() {
    *this = ::std::move(from);
  }

  inline InitReqMessage& operator=(const InitReqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitReqMessage& operator=(InitReqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitReqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitReqMessage* internal_default_instance() {
    return reinterpret_cast<const InitReqMessage*>(
               &_InitReqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitReqMessage& a, InitReqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitReqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitReqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitReqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitReqMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitReqMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitReqMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitReqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.InitReqMessage";
  }
  protected:
  explicit InitReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpireTimestampFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 expire_timestamp = 1;
  void clear_expire_timestamp();
  int32_t expire_timestamp() const;
  void set_expire_timestamp(int32_t value);
  private:
  int32_t _internal_expire_timestamp() const;
  void _internal_set_expire_timestamp(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.InitReqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t expire_timestamp_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class InitRespMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.InitRespMessage) */ {
 public:
  inline InitRespMessage() : InitRespMessage(nullptr) {}
  ~InitRespMessage() override;
  explicit PROTOBUF_CONSTEXPR InitRespMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitRespMessage(const InitRespMessage& from);
  InitRespMessage(InitRespMessage&& from) noexcept
    : InitRespMessage() {
    *this = ::std::move(from);
  }

  inline InitRespMessage& operator=(const InitRespMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRespMessage& operator=(InitRespMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitRespMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitRespMessage* internal_default_instance() {
    return reinterpret_cast<const InitRespMessage*>(
               &_InitRespMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitRespMessage& a, InitRespMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRespMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRespMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitRespMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitRespMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitRespMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitRespMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRespMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.InitRespMessage";
  }
  protected:
  explicit InitRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.InitRespMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerCoreReqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.CreatePlayerCoreReqMessage) */ {
 public:
  inline CreatePlayerCoreReqMessage() : CreatePlayerCoreReqMessage(nullptr) {}
  ~CreatePlayerCoreReqMessage() override;
  explicit PROTOBUF_CONSTEXPR CreatePlayerCoreReqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePlayerCoreReqMessage(const CreatePlayerCoreReqMessage& from);
  CreatePlayerCoreReqMessage(CreatePlayerCoreReqMessage&& from) noexcept
    : CreatePlayerCoreReqMessage() {
    *this = ::std::move(from);
  }

  inline CreatePlayerCoreReqMessage& operator=(const CreatePlayerCoreReqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerCoreReqMessage& operator=(CreatePlayerCoreReqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePlayerCoreReqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePlayerCoreReqMessage* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerCoreReqMessage*>(
               &_CreatePlayerCoreReqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreatePlayerCoreReqMessage& a, CreatePlayerCoreReqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerCoreReqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePlayerCoreReqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePlayerCoreReqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePlayerCoreReqMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePlayerCoreReqMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreatePlayerCoreReqMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerCoreReqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.CreatePlayerCoreReqMessage";
  }
  protected:
  explicit CreatePlayerCoreReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kIsPostFrameFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 is_post_frame = 2;
  void clear_is_post_frame();
  int32_t is_post_frame() const;
  void set_is_post_frame(int32_t value);
  private:
  int32_t _internal_is_post_frame() const;
  void _internal_set_is_post_frame(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.CreatePlayerCoreReqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t is_post_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class CreatePlayerCoreRespMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.CreatePlayerCoreRespMessage) */ {
 public:
  inline CreatePlayerCoreRespMessage() : CreatePlayerCoreRespMessage(nullptr) {}
  ~CreatePlayerCoreRespMessage() override;
  explicit PROTOBUF_CONSTEXPR CreatePlayerCoreRespMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePlayerCoreRespMessage(const CreatePlayerCoreRespMessage& from);
  CreatePlayerCoreRespMessage(CreatePlayerCoreRespMessage&& from) noexcept
    : CreatePlayerCoreRespMessage() {
    *this = ::std::move(from);
  }

  inline CreatePlayerCoreRespMessage& operator=(const CreatePlayerCoreRespMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePlayerCoreRespMessage& operator=(CreatePlayerCoreRespMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePlayerCoreRespMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePlayerCoreRespMessage* internal_default_instance() {
    return reinterpret_cast<const CreatePlayerCoreRespMessage*>(
               &_CreatePlayerCoreRespMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreatePlayerCoreRespMessage& a, CreatePlayerCoreRespMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePlayerCoreRespMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePlayerCoreRespMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePlayerCoreRespMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePlayerCoreRespMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePlayerCoreRespMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreatePlayerCoreRespMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlayerCoreRespMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.CreatePlayerCoreRespMessage";
  }
  protected:
  explicit CreatePlayerCoreRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kIsSuceessFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 is_suceess = 2;
  void clear_is_suceess();
  int32_t is_suceess() const;
  void set_is_suceess(int32_t value);
  private:
  int32_t _internal_is_suceess() const;
  void _internal_set_is_suceess(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.CreatePlayerCoreRespMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t is_suceess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class InitPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.InitPlayerCoreMessage) */ {
 public:
  inline InitPlayerCoreMessage() : InitPlayerCoreMessage(nullptr) {}
  ~InitPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR InitPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitPlayerCoreMessage(const InitPlayerCoreMessage& from);
  InitPlayerCoreMessage(InitPlayerCoreMessage&& from) noexcept
    : InitPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline InitPlayerCoreMessage& operator=(const InitPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitPlayerCoreMessage& operator=(InitPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const InitPlayerCoreMessage*>(
               &_InitPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitPlayerCoreMessage& a, InitPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.InitPlayerCoreMessage";
  }
  protected:
  explicit InitPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kFilePathFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kPlaceholder6FieldNumber = 6,
    kFileSizeFieldNumber = 4,
    kMediaIdFieldNumber = 7,
    kIsLocalFieldNumber = 5,
    kIsAudioMuteFieldNumber = 8,
    kAudioVolumeFieldNumber = 10,
    kVideoSurfaceFieldNumber = 9,
    kIsRepeatFieldNumber = 11,
    kSpeedRatioFieldNumber = 12,
    kMaxFrameWidthFieldNumber = 13,
    kMaxFrameHeightFieldNumber = 14,
    kDecoderTypeFieldNumber = 16,
    kCodecTypeFieldNumber = 15,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_path = 3;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 placeholder_6 = 6;
  void clear_placeholder_6();
  int32_t placeholder_6() const;
  void set_placeholder_6(int32_t value);
  private:
  int32_t _internal_placeholder_6() const;
  void _internal_set_placeholder_6(int32_t value);
  public:

  // int64 file_size = 4;
  void clear_file_size();
  int64_t file_size() const;
  void set_file_size(int64_t value);
  private:
  int64_t _internal_file_size() const;
  void _internal_set_file_size(int64_t value);
  public:

  // int64 media_id = 7;
  void clear_media_id();
  int64_t media_id() const;
  void set_media_id(int64_t value);
  private:
  int64_t _internal_media_id() const;
  void _internal_set_media_id(int64_t value);
  public:

  // bool is_local = 5;
  void clear_is_local();
  bool is_local() const;
  void set_is_local(bool value);
  private:
  bool _internal_is_local() const;
  void _internal_set_is_local(bool value);
  public:

  // bool is_audio_mute = 8;
  void clear_is_audio_mute();
  bool is_audio_mute() const;
  void set_is_audio_mute(bool value);
  private:
  bool _internal_is_audio_mute() const;
  void _internal_set_is_audio_mute(bool value);
  public:

  // float audio_volume = 10;
  void clear_audio_volume();
  float audio_volume() const;
  void set_audio_volume(float value);
  private:
  float _internal_audio_volume() const;
  void _internal_set_audio_volume(float value);
  public:

  // int64 video_surface = 9;
  void clear_video_surface();
  int64_t video_surface() const;
  void set_video_surface(int64_t value);
  private:
  int64_t _internal_video_surface() const;
  void _internal_set_video_surface(int64_t value);
  public:

  // int32 is_repeat = 11;
  void clear_is_repeat();
  int32_t is_repeat() const;
  void set_is_repeat(int32_t value);
  private:
  int32_t _internal_is_repeat() const;
  void _internal_set_is_repeat(int32_t value);
  public:

  // float speed_ratio = 12;
  void clear_speed_ratio();
  float speed_ratio() const;
  void set_speed_ratio(float value);
  private:
  float _internal_speed_ratio() const;
  void _internal_set_speed_ratio(float value);
  public:

  // int32 max_frame_width = 13;
  void clear_max_frame_width();
  int32_t max_frame_width() const;
  void set_max_frame_width(int32_t value);
  private:
  int32_t _internal_max_frame_width() const;
  void _internal_set_max_frame_width(int32_t value);
  public:

  // int32 max_frame_height = 14;
  void clear_max_frame_height();
  int32_t max_frame_height() const;
  void set_max_frame_height(int32_t value);
  private:
  int32_t _internal_max_frame_height() const;
  void _internal_set_max_frame_height(int32_t value);
  public:

  // int64 decoder_type = 16;
  void clear_decoder_type();
  int64_t decoder_type() const;
  void set_decoder_type(int64_t value);
  private:
  int64_t _internal_decoder_type() const;
  void _internal_set_decoder_type(int64_t value);
  public:

  // int32 codec_type = 15;
  void clear_codec_type();
  int32_t codec_type() const;
  void set_codec_type(int32_t value);
  private:
  int32_t _internal_codec_type() const;
  void _internal_set_codec_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.InitPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  int32_t player_id_;
  int32_t placeholder_6_;
  int64_t file_size_;
  int64_t media_id_;
  bool is_local_;
  bool is_audio_mute_;
  float audio_volume_;
  int64_t video_surface_;
  int32_t is_repeat_;
  float speed_ratio_;
  int32_t max_frame_width_;
  int32_t max_frame_height_;
  int64_t decoder_type_;
  int32_t codec_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class InfoPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.InfoPlayerCoreMessage) */ {
 public:
  inline InfoPlayerCoreMessage() : InfoPlayerCoreMessage(nullptr) {}
  ~InfoPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR InfoPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoPlayerCoreMessage(const InfoPlayerCoreMessage& from);
  InfoPlayerCoreMessage(InfoPlayerCoreMessage&& from) noexcept
    : InfoPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline InfoPlayerCoreMessage& operator=(const InfoPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoPlayerCoreMessage& operator=(InfoPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const InfoPlayerCoreMessage*>(
               &_InfoPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InfoPlayerCoreMessage& a, InfoPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.InfoPlayerCoreMessage";
  }
  protected:
  explicit InfoPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kArgFieldNumber = 3,
    kUnknown2FieldNumber = 4,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 arg = 3;
  void clear_arg();
  int32_t arg() const;
  void set_arg(int32_t value);
  private:
  int32_t _internal_arg() const;
  void _internal_set_arg(int32_t value);
  public:

  // int32 unknown_2 = 4;
  void clear_unknown_2();
  int32_t unknown_2() const;
  void set_unknown_2(int32_t value);
  private:
  int32_t _internal_unknown_2() const;
  void _internal_set_unknown_2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.InfoPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  int32_t player_id_;
  int32_t arg_;
  int32_t unknown_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class PlayerIdMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.PlayerIdMessage) */ {
 public:
  inline PlayerIdMessage() : PlayerIdMessage(nullptr) {}
  ~PlayerIdMessage() override;
  explicit PROTOBUF_CONSTEXPR PlayerIdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerIdMessage(const PlayerIdMessage& from);
  PlayerIdMessage(PlayerIdMessage&& from) noexcept
    : PlayerIdMessage() {
    *this = ::std::move(from);
  }

  inline PlayerIdMessage& operator=(const PlayerIdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerIdMessage& operator=(PlayerIdMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerIdMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerIdMessage* internal_default_instance() {
    return reinterpret_cast<const PlayerIdMessage*>(
               &_PlayerIdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerIdMessage& a, PlayerIdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerIdMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerIdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerIdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerIdMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerIdMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerIdMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerIdMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.PlayerIdMessage";
  }
  protected:
  explicit PlayerIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.PlayerIdMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class CurrentPositionMsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.CurrentPositionMsMessage) */ {
 public:
  inline CurrentPositionMsMessage() : CurrentPositionMsMessage(nullptr) {}
  ~CurrentPositionMsMessage() override;
  explicit PROTOBUF_CONSTEXPR CurrentPositionMsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentPositionMsMessage(const CurrentPositionMsMessage& from);
  CurrentPositionMsMessage(CurrentPositionMsMessage&& from) noexcept
    : CurrentPositionMsMessage() {
    *this = ::std::move(from);
  }

  inline CurrentPositionMsMessage& operator=(const CurrentPositionMsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentPositionMsMessage& operator=(CurrentPositionMsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentPositionMsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentPositionMsMessage* internal_default_instance() {
    return reinterpret_cast<const CurrentPositionMsMessage*>(
               &_CurrentPositionMsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CurrentPositionMsMessage& a, CurrentPositionMsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentPositionMsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentPositionMsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentPositionMsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentPositionMsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentPositionMsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurrentPositionMsMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentPositionMsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.CurrentPositionMsMessage";
  }
  protected:
  explicit CurrentPositionMsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnknownFieldNumber = 1,
  };
  // int32 unknown = 1;
  void clear_unknown();
  int32_t unknown() const;
  void set_unknown(int32_t value);
  private:
  int32_t _internal_unknown() const;
  void _internal_set_unknown(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.CurrentPositionMsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t unknown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class CurrentPositionMsInfo_MsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.CurrentPositionMsInfo.MsInfo) */ {
 public:
  inline CurrentPositionMsInfo_MsInfo() : CurrentPositionMsInfo_MsInfo(nullptr) {}
  ~CurrentPositionMsInfo_MsInfo() override;
  explicit PROTOBUF_CONSTEXPR CurrentPositionMsInfo_MsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentPositionMsInfo_MsInfo(const CurrentPositionMsInfo_MsInfo& from);
  CurrentPositionMsInfo_MsInfo(CurrentPositionMsInfo_MsInfo&& from) noexcept
    : CurrentPositionMsInfo_MsInfo() {
    *this = ::std::move(from);
  }

  inline CurrentPositionMsInfo_MsInfo& operator=(const CurrentPositionMsInfo_MsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentPositionMsInfo_MsInfo& operator=(CurrentPositionMsInfo_MsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentPositionMsInfo_MsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentPositionMsInfo_MsInfo* internal_default_instance() {
    return reinterpret_cast<const CurrentPositionMsInfo_MsInfo*>(
               &_CurrentPositionMsInfo_MsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CurrentPositionMsInfo_MsInfo& a, CurrentPositionMsInfo_MsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentPositionMsInfo_MsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentPositionMsInfo_MsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentPositionMsInfo_MsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentPositionMsInfo_MsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentPositionMsInfo_MsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurrentPositionMsInfo_MsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentPositionMsInfo_MsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.CurrentPositionMsInfo.MsInfo";
  }
  protected:
  explicit CurrentPositionMsInfo_MsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 pos = 2;
  void clear_pos();
  int32_t pos() const;
  void set_pos(int32_t value);
  private:
  int32_t _internal_pos() const;
  void _internal_set_pos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.CurrentPositionMsInfo.MsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class CurrentPositionMsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.CurrentPositionMsInfo) */ {
 public:
  inline CurrentPositionMsInfo() : CurrentPositionMsInfo(nullptr) {}
  ~CurrentPositionMsInfo() override;
  explicit PROTOBUF_CONSTEXPR CurrentPositionMsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentPositionMsInfo(const CurrentPositionMsInfo& from);
  CurrentPositionMsInfo(CurrentPositionMsInfo&& from) noexcept
    : CurrentPositionMsInfo() {
    *this = ::std::move(from);
  }

  inline CurrentPositionMsInfo& operator=(const CurrentPositionMsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentPositionMsInfo& operator=(CurrentPositionMsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentPositionMsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentPositionMsInfo* internal_default_instance() {
    return reinterpret_cast<const CurrentPositionMsInfo*>(
               &_CurrentPositionMsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CurrentPositionMsInfo& a, CurrentPositionMsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentPositionMsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentPositionMsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentPositionMsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CurrentPositionMsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentPositionMsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurrentPositionMsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentPositionMsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.CurrentPositionMsInfo";
  }
  protected:
  explicit CurrentPositionMsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CurrentPositionMsInfo_MsInfo MsInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kMsInfoFieldNumber = 1,
  };
  // repeated bytes ms_info = 1;
  int ms_info_size() const;
  private:
  int _internal_ms_info_size() const;
  public:
  void clear_ms_info();
  const std::string& ms_info(int index) const;
  std::string* mutable_ms_info(int index);
  void set_ms_info(int index, const std::string& value);
  void set_ms_info(int index, std::string&& value);
  void set_ms_info(int index, const char* value);
  void set_ms_info(int index, const void* value, size_t size);
  std::string* add_ms_info();
  void add_ms_info(const std::string& value);
  void add_ms_info(std::string&& value);
  void add_ms_info(const char* value);
  void add_ms_info(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ms_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ms_info();
  private:
  const std::string& _internal_ms_info(int index) const;
  std::string* _internal_add_ms_info();
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.CurrentPositionMsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ms_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class ResizePlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.ResizePlayerCoreMessage) */ {
 public:
  inline ResizePlayerCoreMessage() : ResizePlayerCoreMessage(nullptr) {}
  ~ResizePlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR ResizePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResizePlayerCoreMessage(const ResizePlayerCoreMessage& from);
  ResizePlayerCoreMessage(ResizePlayerCoreMessage&& from) noexcept
    : ResizePlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline ResizePlayerCoreMessage& operator=(const ResizePlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizePlayerCoreMessage& operator=(ResizePlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResizePlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResizePlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const ResizePlayerCoreMessage*>(
               &_ResizePlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResizePlayerCoreMessage& a, ResizePlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizePlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizePlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResizePlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResizePlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResizePlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResizePlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizePlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.ResizePlayerCoreMessage";
  }
  protected:
  explicit ResizePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kNewWidthFieldNumber = 2,
    kNewHeightFieldNumber = 3,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 new_width = 2;
  void clear_new_width();
  int32_t new_width() const;
  void set_new_width(int32_t value);
  private:
  int32_t _internal_new_width() const;
  void _internal_set_new_width(int32_t value);
  public:

  // int32 new_height = 3;
  void clear_new_height();
  int32_t new_height() const;
  void set_new_height(int32_t value);
  private:
  int32_t _internal_new_height() const;
  void _internal_set_new_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.ResizePlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t new_width_;
  int32_t new_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class VideoSizeChangedPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.VideoSizeChangedPlayerCoreMessage) */ {
 public:
  inline VideoSizeChangedPlayerCoreMessage() : VideoSizeChangedPlayerCoreMessage(nullptr) {}
  ~VideoSizeChangedPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR VideoSizeChangedPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSizeChangedPlayerCoreMessage(const VideoSizeChangedPlayerCoreMessage& from);
  VideoSizeChangedPlayerCoreMessage(VideoSizeChangedPlayerCoreMessage&& from) noexcept
    : VideoSizeChangedPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline VideoSizeChangedPlayerCoreMessage& operator=(const VideoSizeChangedPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSizeChangedPlayerCoreMessage& operator=(VideoSizeChangedPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoSizeChangedPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSizeChangedPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const VideoSizeChangedPlayerCoreMessage*>(
               &_VideoSizeChangedPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VideoSizeChangedPlayerCoreMessage& a, VideoSizeChangedPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSizeChangedPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSizeChangedPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSizeChangedPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSizeChangedPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoSizeChangedPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoSizeChangedPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSizeChangedPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.VideoSizeChangedPlayerCoreMessage";
  }
  protected:
  explicit VideoSizeChangedPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kOrgWidthFieldNumber = 2,
    kOrgHeightFieldNumber = 3,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 org_width = 2;
  void clear_org_width();
  int32_t org_width() const;
  void set_org_width(int32_t value);
  private:
  int32_t _internal_org_width() const;
  void _internal_set_org_width(int32_t value);
  public:

  // int32 org_height = 3;
  void clear_org_height();
  int32_t org_height() const;
  void set_org_height(int32_t value);
  private:
  int32_t _internal_org_height() const;
  void _internal_set_org_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.VideoSizeChangedPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t org_width_;
  int32_t org_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class PreparePlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.PreparePlayerCoreMessage) */ {
 public:
  inline PreparePlayerCoreMessage() : PreparePlayerCoreMessage(nullptr) {}
  ~PreparePlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR PreparePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreparePlayerCoreMessage(const PreparePlayerCoreMessage& from);
  PreparePlayerCoreMessage(PreparePlayerCoreMessage&& from) noexcept
    : PreparePlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline PreparePlayerCoreMessage& operator=(const PreparePlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreparePlayerCoreMessage& operator=(PreparePlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreparePlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreparePlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const PreparePlayerCoreMessage*>(
               &_PreparePlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PreparePlayerCoreMessage& a, PreparePlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PreparePlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreparePlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreparePlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreparePlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreparePlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PreparePlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreparePlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.PreparePlayerCoreMessage";
  }
  protected:
  explicit PreparePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 duration = 2;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.PreparePlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class StatePlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.StatePlayerCoreMessage) */ {
 public:
  inline StatePlayerCoreMessage() : StatePlayerCoreMessage(nullptr) {}
  ~StatePlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR StatePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatePlayerCoreMessage(const StatePlayerCoreMessage& from);
  StatePlayerCoreMessage(StatePlayerCoreMessage&& from) noexcept
    : StatePlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline StatePlayerCoreMessage& operator=(const StatePlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatePlayerCoreMessage& operator=(StatePlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatePlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatePlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const StatePlayerCoreMessage*>(
               &_StatePlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StatePlayerCoreMessage& a, StatePlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StatePlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatePlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatePlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatePlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatePlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatePlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatePlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.StatePlayerCoreMessage";
  }
  protected:
  explicit StatePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 state = 2;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.StatePlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class AudioMutePlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.AudioMutePlayerCoreMessage) */ {
 public:
  inline AudioMutePlayerCoreMessage() : AudioMutePlayerCoreMessage(nullptr) {}
  ~AudioMutePlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR AudioMutePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioMutePlayerCoreMessage(const AudioMutePlayerCoreMessage& from);
  AudioMutePlayerCoreMessage(AudioMutePlayerCoreMessage&& from) noexcept
    : AudioMutePlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline AudioMutePlayerCoreMessage& operator=(const AudioMutePlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioMutePlayerCoreMessage& operator=(AudioMutePlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioMutePlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioMutePlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const AudioMutePlayerCoreMessage*>(
               &_AudioMutePlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AudioMutePlayerCoreMessage& a, AudioMutePlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioMutePlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioMutePlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioMutePlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioMutePlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioMutePlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioMutePlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioMutePlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.AudioMutePlayerCoreMessage";
  }
  protected:
  explicit AudioMutePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kIsAudioMuteFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // bool is_audio_mute = 2;
  void clear_is_audio_mute();
  bool is_audio_mute() const;
  void set_is_audio_mute(bool value);
  private:
  bool _internal_is_audio_mute() const;
  void _internal_set_is_audio_mute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.AudioMutePlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  bool is_audio_mute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class SeekToPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.SeekToPlayerCoreMessage) */ {
 public:
  inline SeekToPlayerCoreMessage() : SeekToPlayerCoreMessage(nullptr) {}
  ~SeekToPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR SeekToPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekToPlayerCoreMessage(const SeekToPlayerCoreMessage& from);
  SeekToPlayerCoreMessage(SeekToPlayerCoreMessage&& from) noexcept
    : SeekToPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline SeekToPlayerCoreMessage& operator=(const SeekToPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekToPlayerCoreMessage& operator=(SeekToPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekToPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekToPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const SeekToPlayerCoreMessage*>(
               &_SeekToPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SeekToPlayerCoreMessage& a, SeekToPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekToPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekToPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekToPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekToPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekToPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SeekToPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekToPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.SeekToPlayerCoreMessage";
  }
  protected:
  explicit SeekToPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPosMsFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 pos_ms = 2;
  void clear_pos_ms();
  int32_t pos_ms() const;
  void set_pos_ms(int32_t value);
  private:
  int32_t _internal_pos_ms() const;
  void _internal_set_pos_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.SeekToPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t pos_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class VideoSurfaceMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.VideoSurfaceMessage) */ {
 public:
  inline VideoSurfaceMessage() : VideoSurfaceMessage(nullptr) {}
  ~VideoSurfaceMessage() override;
  explicit PROTOBUF_CONSTEXPR VideoSurfaceMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSurfaceMessage(const VideoSurfaceMessage& from);
  VideoSurfaceMessage(VideoSurfaceMessage&& from) noexcept
    : VideoSurfaceMessage() {
    *this = ::std::move(from);
  }

  inline VideoSurfaceMessage& operator=(const VideoSurfaceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSurfaceMessage& operator=(VideoSurfaceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoSurfaceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSurfaceMessage* internal_default_instance() {
    return reinterpret_cast<const VideoSurfaceMessage*>(
               &_VideoSurfaceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VideoSurfaceMessage& a, VideoSurfaceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSurfaceMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSurfaceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSurfaceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSurfaceMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoSurfaceMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoSurfaceMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSurfaceMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.VideoSurfaceMessage";
  }
  protected:
  explicit VideoSurfaceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kWindowFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 window = 2;
  void clear_window();
  int32_t window() const;
  void set_window(int32_t value);
  private:
  int32_t _internal_window() const;
  void _internal_set_window(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.VideoSurfaceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t window_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class AudioVolumePlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.AudioVolumePlayerCoreMessage) */ {
 public:
  inline AudioVolumePlayerCoreMessage() : AudioVolumePlayerCoreMessage(nullptr) {}
  ~AudioVolumePlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR AudioVolumePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioVolumePlayerCoreMessage(const AudioVolumePlayerCoreMessage& from);
  AudioVolumePlayerCoreMessage(AudioVolumePlayerCoreMessage&& from) noexcept
    : AudioVolumePlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline AudioVolumePlayerCoreMessage& operator=(const AudioVolumePlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioVolumePlayerCoreMessage& operator=(AudioVolumePlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioVolumePlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioVolumePlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const AudioVolumePlayerCoreMessage*>(
               &_AudioVolumePlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AudioVolumePlayerCoreMessage& a, AudioVolumePlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioVolumePlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioVolumePlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioVolumePlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioVolumePlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioVolumePlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioVolumePlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioVolumePlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.AudioVolumePlayerCoreMessage";
  }
  protected:
  explicit AudioVolumePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kAudioVolumeFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // float audio_volume = 2;
  void clear_audio_volume();
  float audio_volume() const;
  void set_audio_volume(float value);
  private:
  float _internal_audio_volume() const;
  void _internal_set_audio_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.AudioVolumePlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  float audio_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RepeatPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.RepeatPlayerCoreMessage) */ {
 public:
  inline RepeatPlayerCoreMessage() : RepeatPlayerCoreMessage(nullptr) {}
  ~RepeatPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR RepeatPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatPlayerCoreMessage(const RepeatPlayerCoreMessage& from);
  RepeatPlayerCoreMessage(RepeatPlayerCoreMessage&& from) noexcept
    : RepeatPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline RepeatPlayerCoreMessage& operator=(const RepeatPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatPlayerCoreMessage& operator=(RepeatPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const RepeatPlayerCoreMessage*>(
               &_RepeatPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RepeatPlayerCoreMessage& a, RepeatPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.RepeatPlayerCoreMessage";
  }
  protected:
  explicit RepeatPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kIsRepeatFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 is_repeat = 2;
  void clear_is_repeat();
  int32_t is_repeat() const;
  void set_is_repeat(int32_t value);
  private:
  int32_t _internal_is_repeat() const;
  void _internal_set_is_repeat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.RepeatPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t is_repeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class SpeedRatioPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.SpeedRatioPlayerCoreMessage) */ {
 public:
  inline SpeedRatioPlayerCoreMessage() : SpeedRatioPlayerCoreMessage(nullptr) {}
  ~SpeedRatioPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR SpeedRatioPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedRatioPlayerCoreMessage(const SpeedRatioPlayerCoreMessage& from);
  SpeedRatioPlayerCoreMessage(SpeedRatioPlayerCoreMessage&& from) noexcept
    : SpeedRatioPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline SpeedRatioPlayerCoreMessage& operator=(const SpeedRatioPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedRatioPlayerCoreMessage& operator=(SpeedRatioPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedRatioPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedRatioPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const SpeedRatioPlayerCoreMessage*>(
               &_SpeedRatioPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SpeedRatioPlayerCoreMessage& a, SpeedRatioPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedRatioPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedRatioPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedRatioPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedRatioPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedRatioPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeedRatioPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedRatioPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.SpeedRatioPlayerCoreMessage";
  }
  protected:
  explicit SpeedRatioPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSpeedRatioFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // float speed_ratio = 2;
  void clear_speed_ratio();
  float speed_ratio() const;
  void set_speed_ratio(float value);
  private:
  float _internal_speed_ratio() const;
  void _internal_set_speed_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.SpeedRatioPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  float speed_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class ReadyDataSourceCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.ReadyDataSourceCoreMessage) */ {
 public:
  inline ReadyDataSourceCoreMessage() : ReadyDataSourceCoreMessage(nullptr) {}
  ~ReadyDataSourceCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR ReadyDataSourceCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyDataSourceCoreMessage(const ReadyDataSourceCoreMessage& from);
  ReadyDataSourceCoreMessage(ReadyDataSourceCoreMessage&& from) noexcept
    : ReadyDataSourceCoreMessage() {
    *this = ::std::move(from);
  }

  inline ReadyDataSourceCoreMessage& operator=(const ReadyDataSourceCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyDataSourceCoreMessage& operator=(ReadyDataSourceCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadyDataSourceCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyDataSourceCoreMessage* internal_default_instance() {
    return reinterpret_cast<const ReadyDataSourceCoreMessage*>(
               &_ReadyDataSourceCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReadyDataSourceCoreMessage& a, ReadyDataSourceCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyDataSourceCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyDataSourceCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyDataSourceCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyDataSourceCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadyDataSourceCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadyDataSourceCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyDataSourceCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.ReadyDataSourceCoreMessage";
  }
  protected:
  explicit ReadyDataSourceCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kFilePathFieldNumber = 3,
    kMediaIdFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_path = 3;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // int64 media_id = 4;
  void clear_media_id();
  int64_t media_id() const;
  void set_media_id(int64_t value);
  private:
  int64_t _internal_media_id() const;
  void _internal_set_media_id(int64_t value);
  public:

  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.ReadyDataSourceCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  int64_t media_id_;
  int32_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class DownloadDataSourceCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.DownloadDataSourceCoreMessage) */ {
 public:
  inline DownloadDataSourceCoreMessage() : DownloadDataSourceCoreMessage(nullptr) {}
  ~DownloadDataSourceCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR DownloadDataSourceCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadDataSourceCoreMessage(const DownloadDataSourceCoreMessage& from);
  DownloadDataSourceCoreMessage(DownloadDataSourceCoreMessage&& from) noexcept
    : DownloadDataSourceCoreMessage() {
    *this = ::std::move(from);
  }

  inline DownloadDataSourceCoreMessage& operator=(const DownloadDataSourceCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadDataSourceCoreMessage& operator=(DownloadDataSourceCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadDataSourceCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadDataSourceCoreMessage* internal_default_instance() {
    return reinterpret_cast<const DownloadDataSourceCoreMessage*>(
               &_DownloadDataSourceCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DownloadDataSourceCoreMessage& a, DownloadDataSourceCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadDataSourceCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadDataSourceCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadDataSourceCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadDataSourceCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadDataSourceCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadDataSourceCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadDataSourceCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.DownloadDataSourceCoreMessage";
  }
  protected:
  explicit DownloadDataSourceCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kFilePathFieldNumber = 3,
    kFileSizeFieldNumber = 4,
    kMediaIdFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_path = 3;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // int64 file_size = 4;
  void clear_file_size();
  int64_t file_size() const;
  void set_file_size(int64_t value);
  private:
  int64_t _internal_file_size() const;
  void _internal_set_file_size(int64_t value);
  public:

  // int64 media_id = 5;
  void clear_media_id();
  int64_t media_id() const;
  void set_media_id(int64_t value);
  private:
  int64_t _internal_media_id() const;
  void _internal_set_media_id(int64_t value);
  public:

  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.DownloadDataSourceCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  int64_t file_size_;
  int64_t media_id_;
  int32_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class ErrorPlayerCoreMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.ErrorPlayerCoreMessage) */ {
 public:
  inline ErrorPlayerCoreMessage() : ErrorPlayerCoreMessage(nullptr) {}
  ~ErrorPlayerCoreMessage() override;
  explicit PROTOBUF_CONSTEXPR ErrorPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorPlayerCoreMessage(const ErrorPlayerCoreMessage& from);
  ErrorPlayerCoreMessage(ErrorPlayerCoreMessage&& from) noexcept
    : ErrorPlayerCoreMessage() {
    *this = ::std::move(from);
  }

  inline ErrorPlayerCoreMessage& operator=(const ErrorPlayerCoreMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorPlayerCoreMessage& operator=(ErrorPlayerCoreMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorPlayerCoreMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorPlayerCoreMessage* internal_default_instance() {
    return reinterpret_cast<const ErrorPlayerCoreMessage*>(
               &_ErrorPlayerCoreMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ErrorPlayerCoreMessage& a, ErrorPlayerCoreMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorPlayerCoreMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorPlayerCoreMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorPlayerCoreMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorPlayerCoreMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorPlayerCoreMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrorPlayerCoreMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorPlayerCoreMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.ErrorPlayerCoreMessage";
  }
  protected:
  explicit ErrorPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kErrorTypeFieldNumber = 3,
    kErrorCodeFieldNumber = 4,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 error_type = 3;
  void clear_error_type();
  int32_t error_type() const;
  void set_error_type(int32_t value);
  private:
  int32_t _internal_error_type() const;
  void _internal_set_error_type(int32_t value);
  public:

  // int32 error_code = 4;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.ErrorPlayerCoreMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int32_t player_id_;
  int32_t error_type_;
  int32_t error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class StartTaskProxyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.StartTaskProxyMessage) */ {
 public:
  inline StartTaskProxyMessage() : StartTaskProxyMessage(nullptr) {}
  ~StartTaskProxyMessage() override;
  explicit PROTOBUF_CONSTEXPR StartTaskProxyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartTaskProxyMessage(const StartTaskProxyMessage& from);
  StartTaskProxyMessage(StartTaskProxyMessage&& from) noexcept
    : StartTaskProxyMessage() {
    *this = ::std::move(from);
  }

  inline StartTaskProxyMessage& operator=(const StartTaskProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTaskProxyMessage& operator=(StartTaskProxyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartTaskProxyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartTaskProxyMessage* internal_default_instance() {
    return reinterpret_cast<const StartTaskProxyMessage*>(
               &_StartTaskProxyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StartTaskProxyMessage& a, StartTaskProxyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTaskProxyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTaskProxyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartTaskProxyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartTaskProxyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartTaskProxyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartTaskProxyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTaskProxyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.StartTaskProxyMessage";
  }
  protected:
  explicit StartTaskProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // int32 task_id = 1;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // int32 player_id = 2;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.StartTaskProxyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t task_id_;
  int32_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class StartRequestProxyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.StartRequestProxyMessage) */ {
 public:
  inline StartRequestProxyMessage() : StartRequestProxyMessage(nullptr) {}
  ~StartRequestProxyMessage() override;
  explicit PROTOBUF_CONSTEXPR StartRequestProxyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequestProxyMessage(const StartRequestProxyMessage& from);
  StartRequestProxyMessage(StartRequestProxyMessage&& from) noexcept
    : StartRequestProxyMessage() {
    *this = ::std::move(from);
  }

  inline StartRequestProxyMessage& operator=(const StartRequestProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequestProxyMessage& operator=(StartRequestProxyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequestProxyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequestProxyMessage* internal_default_instance() {
    return reinterpret_cast<const StartRequestProxyMessage*>(
               &_StartRequestProxyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StartRequestProxyMessage& a, StartRequestProxyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequestProxyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequestProxyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequestProxyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequestProxyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRequestProxyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRequestProxyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequestProxyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.StartRequestProxyMessage";
  }
  protected:
  explicit StartRequestProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kRequestStartFieldNumber = 3,
    kRequestEndFieldNumber = 4,
  };
  // int32 task_id = 1;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // int32 player_id = 2;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 request_start = 3;
  void clear_request_start();
  int32_t request_start() const;
  void set_request_start(int32_t value);
  private:
  int32_t _internal_request_start() const;
  void _internal_set_request_start(int32_t value);
  public:

  // int32 request_end = 4;
  void clear_request_end();
  int32_t request_end() const;
  void set_request_end(int32_t value);
  private:
  int32_t _internal_request_end() const;
  void _internal_set_request_end(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.StartRequestProxyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t task_id_;
  int32_t player_id_;
  int32_t request_start_;
  int32_t request_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class CloseRequestProxyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.CloseRequestProxyMessage) */ {
 public:
  inline CloseRequestProxyMessage() : CloseRequestProxyMessage(nullptr) {}
  ~CloseRequestProxyMessage() override;
  explicit PROTOBUF_CONSTEXPR CloseRequestProxyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseRequestProxyMessage(const CloseRequestProxyMessage& from);
  CloseRequestProxyMessage(CloseRequestProxyMessage&& from) noexcept
    : CloseRequestProxyMessage() {
    *this = ::std::move(from);
  }

  inline CloseRequestProxyMessage& operator=(const CloseRequestProxyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRequestProxyMessage& operator=(CloseRequestProxyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseRequestProxyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseRequestProxyMessage* internal_default_instance() {
    return reinterpret_cast<const CloseRequestProxyMessage*>(
               &_CloseRequestProxyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CloseRequestProxyMessage& a, CloseRequestProxyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRequestProxyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseRequestProxyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseRequestProxyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseRequestProxyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseRequestProxyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseRequestProxyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequestProxyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.CloseRequestProxyMessage";
  }
  protected:
  explicit CloseRequestProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // int32 task_id = 1;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // int32 player_id = 2;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.CloseRequestProxyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t task_id_;
  int32_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class PollingDataProxyReqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player_protobuf.PollingDataProxyReqMessage) */ {
 public:
  inline PollingDataProxyReqMessage() : PollingDataProxyReqMessage(nullptr) {}
  ~PollingDataProxyReqMessage() override;
  explicit PROTOBUF_CONSTEXPR PollingDataProxyReqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PollingDataProxyReqMessage(const PollingDataProxyReqMessage& from);
  PollingDataProxyReqMessage(PollingDataProxyReqMessage&& from) noexcept
    : PollingDataProxyReqMessage() {
    *this = ::std::move(from);
  }

  inline PollingDataProxyReqMessage& operator=(const PollingDataProxyReqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollingDataProxyReqMessage& operator=(PollingDataProxyReqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollingDataProxyReqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollingDataProxyReqMessage* internal_default_instance() {
    return reinterpret_cast<const PollingDataProxyReqMessage*>(
               &_PollingDataProxyReqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PollingDataProxyReqMessage& a, PollingDataProxyReqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PollingDataProxyReqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollingDataProxyReqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PollingDataProxyReqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PollingDataProxyReqMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PollingDataProxyReqMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PollingDataProxyReqMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollingDataProxyReqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.PollingDataProxyReqMessage";
  }
  protected:
  explicit PollingDataProxyReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kReadySizeFieldNumber = 4,
    kDownloadSizeFieldNumber = 5,
    kReadSizeFieldNumber = 6,
  };
  // int32 task_id = 1;
  void clear_task_id();
  int32_t task_id() const;
  void set_task_id(int32_t value);
  private:
  int32_t _internal_task_id() const;
  void _internal_set_task_id(int32_t value);
  public:

  // int32 player_id = 2;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 offset = 3;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 ready_size = 4;
  void clear_ready_size();
  int32_t ready_size() const;
  void set_ready_size(int32_t value);
  private:
  int32_t _internal_ready_size() const;
  void _internal_set_ready_size(int32_t value);
  public:

  // int32 download_size = 5;
  void clear_download_size();
  int32_t download_size() const;
  void set_download_size(int32_t value);
  private:
  int32_t _internal_download_size() const;
  void _internal_set_download_size(int32_t value);
  public:

  // int32 read_size = 6;
  void clear_read_size();
  int32_t read_size() const;
  void set_read_size(int32_t value);
  private:
  int32_t _internal_read_size() const;
  void _internal_set_read_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:player_protobuf.PollingDataProxyReqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t task_id_;
  int32_t player_id_;
  int32_t offset_;
  int32_t ready_size_;
  int32_t download_size_;
  int32_t read_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class PollingDataProxyRespMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:player_protobuf.PollingDataProxyRespMessage) */ {
 public:
  inline PollingDataProxyRespMessage() : PollingDataProxyRespMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PollingDataProxyRespMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PollingDataProxyRespMessage(const PollingDataProxyRespMessage& from);
  PollingDataProxyRespMessage(PollingDataProxyRespMessage&& from) noexcept
    : PollingDataProxyRespMessage() {
    *this = ::std::move(from);
  }

  inline PollingDataProxyRespMessage& operator=(const PollingDataProxyRespMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollingDataProxyRespMessage& operator=(PollingDataProxyRespMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollingDataProxyRespMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollingDataProxyRespMessage* internal_default_instance() {
    return reinterpret_cast<const PollingDataProxyRespMessage*>(
               &_PollingDataProxyRespMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PollingDataProxyRespMessage& a, PollingDataProxyRespMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PollingDataProxyRespMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollingDataProxyRespMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PollingDataProxyRespMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PollingDataProxyRespMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PollingDataProxyRespMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PollingDataProxyRespMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player_protobuf.PollingDataProxyRespMessage";
  }
  protected:
  explicit PollingDataProxyRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:player_protobuf.PollingDataProxyRespMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_player_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitReqMessage

// int32 expire_timestamp = 1;
inline void InitReqMessage::clear_expire_timestamp() {
  expire_timestamp_ = 0;
}
inline int32_t InitReqMessage::_internal_expire_timestamp() const {
  return expire_timestamp_;
}
inline int32_t InitReqMessage::expire_timestamp() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitReqMessage.expire_timestamp)
  return _internal_expire_timestamp();
}
inline void InitReqMessage::_internal_set_expire_timestamp(int32_t value) {
  
  expire_timestamp_ = value;
}
inline void InitReqMessage::set_expire_timestamp(int32_t value) {
  _internal_set_expire_timestamp(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitReqMessage.expire_timestamp)
}

// int32 type = 2;
inline void InitReqMessage::clear_type() {
  type_ = 0;
}
inline int32_t InitReqMessage::_internal_type() const {
  return type_;
}
inline int32_t InitReqMessage::type() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitReqMessage.type)
  return _internal_type();
}
inline void InitReqMessage::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void InitReqMessage::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitReqMessage.type)
}

// -------------------------------------------------------------------

// InitRespMessage

// int32 status = 1;
inline void InitRespMessage::clear_status() {
  status_ = 0;
}
inline int32_t InitRespMessage::_internal_status() const {
  return status_;
}
inline int32_t InitRespMessage::status() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitRespMessage.status)
  return _internal_status();
}
inline void InitRespMessage::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void InitRespMessage::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitRespMessage.status)
}

// -------------------------------------------------------------------

// CreatePlayerCoreReqMessage

// int32 player_id = 1;
inline void CreatePlayerCoreReqMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t CreatePlayerCoreReqMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t CreatePlayerCoreReqMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CreatePlayerCoreReqMessage.player_id)
  return _internal_player_id();
}
inline void CreatePlayerCoreReqMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void CreatePlayerCoreReqMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CreatePlayerCoreReqMessage.player_id)
}

// int32 is_post_frame = 2;
inline void CreatePlayerCoreReqMessage::clear_is_post_frame() {
  is_post_frame_ = 0;
}
inline int32_t CreatePlayerCoreReqMessage::_internal_is_post_frame() const {
  return is_post_frame_;
}
inline int32_t CreatePlayerCoreReqMessage::is_post_frame() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CreatePlayerCoreReqMessage.is_post_frame)
  return _internal_is_post_frame();
}
inline void CreatePlayerCoreReqMessage::_internal_set_is_post_frame(int32_t value) {
  
  is_post_frame_ = value;
}
inline void CreatePlayerCoreReqMessage::set_is_post_frame(int32_t value) {
  _internal_set_is_post_frame(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CreatePlayerCoreReqMessage.is_post_frame)
}

// -------------------------------------------------------------------

// CreatePlayerCoreRespMessage

// int32 player_id = 1;
inline void CreatePlayerCoreRespMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t CreatePlayerCoreRespMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t CreatePlayerCoreRespMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CreatePlayerCoreRespMessage.player_id)
  return _internal_player_id();
}
inline void CreatePlayerCoreRespMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void CreatePlayerCoreRespMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CreatePlayerCoreRespMessage.player_id)
}

// int32 is_suceess = 2;
inline void CreatePlayerCoreRespMessage::clear_is_suceess() {
  is_suceess_ = 0;
}
inline int32_t CreatePlayerCoreRespMessage::_internal_is_suceess() const {
  return is_suceess_;
}
inline int32_t CreatePlayerCoreRespMessage::is_suceess() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CreatePlayerCoreRespMessage.is_suceess)
  return _internal_is_suceess();
}
inline void CreatePlayerCoreRespMessage::_internal_set_is_suceess(int32_t value) {
  
  is_suceess_ = value;
}
inline void CreatePlayerCoreRespMessage::set_is_suceess(int32_t value) {
  _internal_set_is_suceess(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CreatePlayerCoreRespMessage.is_suceess)
}

// -------------------------------------------------------------------

// InitPlayerCoreMessage

// int32 player_id = 1;
inline void InitPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t InitPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t InitPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void InitPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void InitPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.player_id)
}

// string file_name = 2;
inline void InitPlayerCoreMessage::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& InitPlayerCoreMessage::file_name() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitPlayerCoreMessage::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.file_name)
}
inline std::string* InitPlayerCoreMessage::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:player_protobuf.InitPlayerCoreMessage.file_name)
  return _s;
}
inline const std::string& InitPlayerCoreMessage::_internal_file_name() const {
  return file_name_.Get();
}
inline void InitPlayerCoreMessage::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InitPlayerCoreMessage::_internal_mutable_file_name() {
  
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InitPlayerCoreMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:player_protobuf.InitPlayerCoreMessage.file_name)
  return file_name_.Release();
}
inline void InitPlayerCoreMessage::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.InitPlayerCoreMessage.file_name)
}

// string file_path = 3;
inline void InitPlayerCoreMessage::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& InitPlayerCoreMessage::file_path() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitPlayerCoreMessage::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.file_path)
}
inline std::string* InitPlayerCoreMessage::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:player_protobuf.InitPlayerCoreMessage.file_path)
  return _s;
}
inline const std::string& InitPlayerCoreMessage::_internal_file_path() const {
  return file_path_.Get();
}
inline void InitPlayerCoreMessage::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* InitPlayerCoreMessage::_internal_mutable_file_path() {
  
  return file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* InitPlayerCoreMessage::release_file_path() {
  // @@protoc_insertion_point(field_release:player_protobuf.InitPlayerCoreMessage.file_path)
  return file_path_.Release();
}
inline void InitPlayerCoreMessage::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.InitPlayerCoreMessage.file_path)
}

// int64 file_size = 4;
inline void InitPlayerCoreMessage::clear_file_size() {
  file_size_ = int64_t{0};
}
inline int64_t InitPlayerCoreMessage::_internal_file_size() const {
  return file_size_;
}
inline int64_t InitPlayerCoreMessage::file_size() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.file_size)
  return _internal_file_size();
}
inline void InitPlayerCoreMessage::_internal_set_file_size(int64_t value) {
  
  file_size_ = value;
}
inline void InitPlayerCoreMessage::set_file_size(int64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.file_size)
}

// bool is_local = 5;
inline void InitPlayerCoreMessage::clear_is_local() {
  is_local_ = false;
}
inline bool InitPlayerCoreMessage::_internal_is_local() const {
  return is_local_;
}
inline bool InitPlayerCoreMessage::is_local() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.is_local)
  return _internal_is_local();
}
inline void InitPlayerCoreMessage::_internal_set_is_local(bool value) {
  
  is_local_ = value;
}
inline void InitPlayerCoreMessage::set_is_local(bool value) {
  _internal_set_is_local(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.is_local)
}

// int32 placeholder_6 = 6;
inline void InitPlayerCoreMessage::clear_placeholder_6() {
  placeholder_6_ = 0;
}
inline int32_t InitPlayerCoreMessage::_internal_placeholder_6() const {
  return placeholder_6_;
}
inline int32_t InitPlayerCoreMessage::placeholder_6() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.placeholder_6)
  return _internal_placeholder_6();
}
inline void InitPlayerCoreMessage::_internal_set_placeholder_6(int32_t value) {
  
  placeholder_6_ = value;
}
inline void InitPlayerCoreMessage::set_placeholder_6(int32_t value) {
  _internal_set_placeholder_6(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.placeholder_6)
}

// int64 media_id = 7;
inline void InitPlayerCoreMessage::clear_media_id() {
  media_id_ = int64_t{0};
}
inline int64_t InitPlayerCoreMessage::_internal_media_id() const {
  return media_id_;
}
inline int64_t InitPlayerCoreMessage::media_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.media_id)
  return _internal_media_id();
}
inline void InitPlayerCoreMessage::_internal_set_media_id(int64_t value) {
  
  media_id_ = value;
}
inline void InitPlayerCoreMessage::set_media_id(int64_t value) {
  _internal_set_media_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.media_id)
}

// bool is_audio_mute = 8;
inline void InitPlayerCoreMessage::clear_is_audio_mute() {
  is_audio_mute_ = false;
}
inline bool InitPlayerCoreMessage::_internal_is_audio_mute() const {
  return is_audio_mute_;
}
inline bool InitPlayerCoreMessage::is_audio_mute() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.is_audio_mute)
  return _internal_is_audio_mute();
}
inline void InitPlayerCoreMessage::_internal_set_is_audio_mute(bool value) {
  
  is_audio_mute_ = value;
}
inline void InitPlayerCoreMessage::set_is_audio_mute(bool value) {
  _internal_set_is_audio_mute(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.is_audio_mute)
}

// int64 video_surface = 9;
inline void InitPlayerCoreMessage::clear_video_surface() {
  video_surface_ = int64_t{0};
}
inline int64_t InitPlayerCoreMessage::_internal_video_surface() const {
  return video_surface_;
}
inline int64_t InitPlayerCoreMessage::video_surface() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.video_surface)
  return _internal_video_surface();
}
inline void InitPlayerCoreMessage::_internal_set_video_surface(int64_t value) {
  
  video_surface_ = value;
}
inline void InitPlayerCoreMessage::set_video_surface(int64_t value) {
  _internal_set_video_surface(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.video_surface)
}

// float audio_volume = 10;
inline void InitPlayerCoreMessage::clear_audio_volume() {
  audio_volume_ = 0;
}
inline float InitPlayerCoreMessage::_internal_audio_volume() const {
  return audio_volume_;
}
inline float InitPlayerCoreMessage::audio_volume() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.audio_volume)
  return _internal_audio_volume();
}
inline void InitPlayerCoreMessage::_internal_set_audio_volume(float value) {
  
  audio_volume_ = value;
}
inline void InitPlayerCoreMessage::set_audio_volume(float value) {
  _internal_set_audio_volume(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.audio_volume)
}

// int32 is_repeat = 11;
inline void InitPlayerCoreMessage::clear_is_repeat() {
  is_repeat_ = 0;
}
inline int32_t InitPlayerCoreMessage::_internal_is_repeat() const {
  return is_repeat_;
}
inline int32_t InitPlayerCoreMessage::is_repeat() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.is_repeat)
  return _internal_is_repeat();
}
inline void InitPlayerCoreMessage::_internal_set_is_repeat(int32_t value) {
  
  is_repeat_ = value;
}
inline void InitPlayerCoreMessage::set_is_repeat(int32_t value) {
  _internal_set_is_repeat(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.is_repeat)
}

// float speed_ratio = 12;
inline void InitPlayerCoreMessage::clear_speed_ratio() {
  speed_ratio_ = 0;
}
inline float InitPlayerCoreMessage::_internal_speed_ratio() const {
  return speed_ratio_;
}
inline float InitPlayerCoreMessage::speed_ratio() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.speed_ratio)
  return _internal_speed_ratio();
}
inline void InitPlayerCoreMessage::_internal_set_speed_ratio(float value) {
  
  speed_ratio_ = value;
}
inline void InitPlayerCoreMessage::set_speed_ratio(float value) {
  _internal_set_speed_ratio(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.speed_ratio)
}

// int32 max_frame_width = 13;
inline void InitPlayerCoreMessage::clear_max_frame_width() {
  max_frame_width_ = 0;
}
inline int32_t InitPlayerCoreMessage::_internal_max_frame_width() const {
  return max_frame_width_;
}
inline int32_t InitPlayerCoreMessage::max_frame_width() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.max_frame_width)
  return _internal_max_frame_width();
}
inline void InitPlayerCoreMessage::_internal_set_max_frame_width(int32_t value) {
  
  max_frame_width_ = value;
}
inline void InitPlayerCoreMessage::set_max_frame_width(int32_t value) {
  _internal_set_max_frame_width(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.max_frame_width)
}

// int32 max_frame_height = 14;
inline void InitPlayerCoreMessage::clear_max_frame_height() {
  max_frame_height_ = 0;
}
inline int32_t InitPlayerCoreMessage::_internal_max_frame_height() const {
  return max_frame_height_;
}
inline int32_t InitPlayerCoreMessage::max_frame_height() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.max_frame_height)
  return _internal_max_frame_height();
}
inline void InitPlayerCoreMessage::_internal_set_max_frame_height(int32_t value) {
  
  max_frame_height_ = value;
}
inline void InitPlayerCoreMessage::set_max_frame_height(int32_t value) {
  _internal_set_max_frame_height(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.max_frame_height)
}

// int32 codec_type = 15;
inline void InitPlayerCoreMessage::clear_codec_type() {
  codec_type_ = 0;
}
inline int32_t InitPlayerCoreMessage::_internal_codec_type() const {
  return codec_type_;
}
inline int32_t InitPlayerCoreMessage::codec_type() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.codec_type)
  return _internal_codec_type();
}
inline void InitPlayerCoreMessage::_internal_set_codec_type(int32_t value) {
  
  codec_type_ = value;
}
inline void InitPlayerCoreMessage::set_codec_type(int32_t value) {
  _internal_set_codec_type(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.codec_type)
}

// int64 decoder_type = 16;
inline void InitPlayerCoreMessage::clear_decoder_type() {
  decoder_type_ = int64_t{0};
}
inline int64_t InitPlayerCoreMessage::_internal_decoder_type() const {
  return decoder_type_;
}
inline int64_t InitPlayerCoreMessage::decoder_type() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InitPlayerCoreMessage.decoder_type)
  return _internal_decoder_type();
}
inline void InitPlayerCoreMessage::_internal_set_decoder_type(int64_t value) {
  
  decoder_type_ = value;
}
inline void InitPlayerCoreMessage::set_decoder_type(int64_t value) {
  _internal_set_decoder_type(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InitPlayerCoreMessage.decoder_type)
}

// -------------------------------------------------------------------

// InfoPlayerCoreMessage

// int32 player_id = 1;
inline void InfoPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t InfoPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t InfoPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InfoPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void InfoPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void InfoPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InfoPlayerCoreMessage.player_id)
}

// string type = 2;
inline void InfoPlayerCoreMessage::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& InfoPlayerCoreMessage::type() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InfoPlayerCoreMessage.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoPlayerCoreMessage::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.InfoPlayerCoreMessage.type)
}
inline std::string* InfoPlayerCoreMessage::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:player_protobuf.InfoPlayerCoreMessage.type)
  return _s;
}
inline const std::string& InfoPlayerCoreMessage::_internal_type() const {
  return type_.Get();
}
inline void InfoPlayerCoreMessage::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoPlayerCoreMessage::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoPlayerCoreMessage::release_type() {
  // @@protoc_insertion_point(field_release:player_protobuf.InfoPlayerCoreMessage.type)
  return type_.Release();
}
inline void InfoPlayerCoreMessage::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.InfoPlayerCoreMessage.type)
}

// int32 arg = 3;
inline void InfoPlayerCoreMessage::clear_arg() {
  arg_ = 0;
}
inline int32_t InfoPlayerCoreMessage::_internal_arg() const {
  return arg_;
}
inline int32_t InfoPlayerCoreMessage::arg() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InfoPlayerCoreMessage.arg)
  return _internal_arg();
}
inline void InfoPlayerCoreMessage::_internal_set_arg(int32_t value) {
  
  arg_ = value;
}
inline void InfoPlayerCoreMessage::set_arg(int32_t value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InfoPlayerCoreMessage.arg)
}

// int32 unknown_2 = 4;
inline void InfoPlayerCoreMessage::clear_unknown_2() {
  unknown_2_ = 0;
}
inline int32_t InfoPlayerCoreMessage::_internal_unknown_2() const {
  return unknown_2_;
}
inline int32_t InfoPlayerCoreMessage::unknown_2() const {
  // @@protoc_insertion_point(field_get:player_protobuf.InfoPlayerCoreMessage.unknown_2)
  return _internal_unknown_2();
}
inline void InfoPlayerCoreMessage::_internal_set_unknown_2(int32_t value) {
  
  unknown_2_ = value;
}
inline void InfoPlayerCoreMessage::set_unknown_2(int32_t value) {
  _internal_set_unknown_2(value);
  // @@protoc_insertion_point(field_set:player_protobuf.InfoPlayerCoreMessage.unknown_2)
}

// -------------------------------------------------------------------

// PlayerIdMessage

// int32 player_id = 1;
inline void PlayerIdMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t PlayerIdMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t PlayerIdMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PlayerIdMessage.player_id)
  return _internal_player_id();
}
inline void PlayerIdMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void PlayerIdMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PlayerIdMessage.player_id)
}

// -------------------------------------------------------------------

// CurrentPositionMsMessage

// int32 unknown = 1;
inline void CurrentPositionMsMessage::clear_unknown() {
  unknown_ = 0;
}
inline int32_t CurrentPositionMsMessage::_internal_unknown() const {
  return unknown_;
}
inline int32_t CurrentPositionMsMessage::unknown() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CurrentPositionMsMessage.unknown)
  return _internal_unknown();
}
inline void CurrentPositionMsMessage::_internal_set_unknown(int32_t value) {
  
  unknown_ = value;
}
inline void CurrentPositionMsMessage::set_unknown(int32_t value) {
  _internal_set_unknown(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CurrentPositionMsMessage.unknown)
}

// -------------------------------------------------------------------

// CurrentPositionMsInfo_MsInfo

// int32 player_id = 1;
inline void CurrentPositionMsInfo_MsInfo::clear_player_id() {
  player_id_ = 0;
}
inline int32_t CurrentPositionMsInfo_MsInfo::_internal_player_id() const {
  return player_id_;
}
inline int32_t CurrentPositionMsInfo_MsInfo::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CurrentPositionMsInfo.MsInfo.player_id)
  return _internal_player_id();
}
inline void CurrentPositionMsInfo_MsInfo::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void CurrentPositionMsInfo_MsInfo::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CurrentPositionMsInfo.MsInfo.player_id)
}

// int32 pos = 2;
inline void CurrentPositionMsInfo_MsInfo::clear_pos() {
  pos_ = 0;
}
inline int32_t CurrentPositionMsInfo_MsInfo::_internal_pos() const {
  return pos_;
}
inline int32_t CurrentPositionMsInfo_MsInfo::pos() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CurrentPositionMsInfo.MsInfo.pos)
  return _internal_pos();
}
inline void CurrentPositionMsInfo_MsInfo::_internal_set_pos(int32_t value) {
  
  pos_ = value;
}
inline void CurrentPositionMsInfo_MsInfo::set_pos(int32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CurrentPositionMsInfo.MsInfo.pos)
}

// -------------------------------------------------------------------

// CurrentPositionMsInfo

// repeated bytes ms_info = 1;
inline int CurrentPositionMsInfo::_internal_ms_info_size() const {
  return ms_info_.size();
}
inline int CurrentPositionMsInfo::ms_info_size() const {
  return _internal_ms_info_size();
}
inline void CurrentPositionMsInfo::clear_ms_info() {
  ms_info_.Clear();
}
inline std::string* CurrentPositionMsInfo::add_ms_info() {
  std::string* _s = _internal_add_ms_info();
  // @@protoc_insertion_point(field_add_mutable:player_protobuf.CurrentPositionMsInfo.ms_info)
  return _s;
}
inline const std::string& CurrentPositionMsInfo::_internal_ms_info(int index) const {
  return ms_info_.Get(index);
}
inline const std::string& CurrentPositionMsInfo::ms_info(int index) const {
  // @@protoc_insertion_point(field_get:player_protobuf.CurrentPositionMsInfo.ms_info)
  return _internal_ms_info(index);
}
inline std::string* CurrentPositionMsInfo::mutable_ms_info(int index) {
  // @@protoc_insertion_point(field_mutable:player_protobuf.CurrentPositionMsInfo.ms_info)
  return ms_info_.Mutable(index);
}
inline void CurrentPositionMsInfo::set_ms_info(int index, const std::string& value) {
  ms_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline void CurrentPositionMsInfo::set_ms_info(int index, std::string&& value) {
  ms_info_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline void CurrentPositionMsInfo::set_ms_info(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ms_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline void CurrentPositionMsInfo::set_ms_info(int index, const void* value, size_t size) {
  ms_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline std::string* CurrentPositionMsInfo::_internal_add_ms_info() {
  return ms_info_.Add();
}
inline void CurrentPositionMsInfo::add_ms_info(const std::string& value) {
  ms_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline void CurrentPositionMsInfo::add_ms_info(std::string&& value) {
  ms_info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline void CurrentPositionMsInfo::add_ms_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ms_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline void CurrentPositionMsInfo::add_ms_info(const void* value, size_t size) {
  ms_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:player_protobuf.CurrentPositionMsInfo.ms_info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CurrentPositionMsInfo::ms_info() const {
  // @@protoc_insertion_point(field_list:player_protobuf.CurrentPositionMsInfo.ms_info)
  return ms_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CurrentPositionMsInfo::mutable_ms_info() {
  // @@protoc_insertion_point(field_mutable_list:player_protobuf.CurrentPositionMsInfo.ms_info)
  return &ms_info_;
}

// -------------------------------------------------------------------

// ResizePlayerCoreMessage

// int32 player_id = 1;
inline void ResizePlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t ResizePlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t ResizePlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ResizePlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void ResizePlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void ResizePlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ResizePlayerCoreMessage.player_id)
}

// int32 new_width = 2;
inline void ResizePlayerCoreMessage::clear_new_width() {
  new_width_ = 0;
}
inline int32_t ResizePlayerCoreMessage::_internal_new_width() const {
  return new_width_;
}
inline int32_t ResizePlayerCoreMessage::new_width() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ResizePlayerCoreMessage.new_width)
  return _internal_new_width();
}
inline void ResizePlayerCoreMessage::_internal_set_new_width(int32_t value) {
  
  new_width_ = value;
}
inline void ResizePlayerCoreMessage::set_new_width(int32_t value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ResizePlayerCoreMessage.new_width)
}

// int32 new_height = 3;
inline void ResizePlayerCoreMessage::clear_new_height() {
  new_height_ = 0;
}
inline int32_t ResizePlayerCoreMessage::_internal_new_height() const {
  return new_height_;
}
inline int32_t ResizePlayerCoreMessage::new_height() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ResizePlayerCoreMessage.new_height)
  return _internal_new_height();
}
inline void ResizePlayerCoreMessage::_internal_set_new_height(int32_t value) {
  
  new_height_ = value;
}
inline void ResizePlayerCoreMessage::set_new_height(int32_t value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ResizePlayerCoreMessage.new_height)
}

// -------------------------------------------------------------------

// VideoSizeChangedPlayerCoreMessage

// int32 player_id = 1;
inline void VideoSizeChangedPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t VideoSizeChangedPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t VideoSizeChangedPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.VideoSizeChangedPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void VideoSizeChangedPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void VideoSizeChangedPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.VideoSizeChangedPlayerCoreMessage.player_id)
}

// int32 org_width = 2;
inline void VideoSizeChangedPlayerCoreMessage::clear_org_width() {
  org_width_ = 0;
}
inline int32_t VideoSizeChangedPlayerCoreMessage::_internal_org_width() const {
  return org_width_;
}
inline int32_t VideoSizeChangedPlayerCoreMessage::org_width() const {
  // @@protoc_insertion_point(field_get:player_protobuf.VideoSizeChangedPlayerCoreMessage.org_width)
  return _internal_org_width();
}
inline void VideoSizeChangedPlayerCoreMessage::_internal_set_org_width(int32_t value) {
  
  org_width_ = value;
}
inline void VideoSizeChangedPlayerCoreMessage::set_org_width(int32_t value) {
  _internal_set_org_width(value);
  // @@protoc_insertion_point(field_set:player_protobuf.VideoSizeChangedPlayerCoreMessage.org_width)
}

// int32 org_height = 3;
inline void VideoSizeChangedPlayerCoreMessage::clear_org_height() {
  org_height_ = 0;
}
inline int32_t VideoSizeChangedPlayerCoreMessage::_internal_org_height() const {
  return org_height_;
}
inline int32_t VideoSizeChangedPlayerCoreMessage::org_height() const {
  // @@protoc_insertion_point(field_get:player_protobuf.VideoSizeChangedPlayerCoreMessage.org_height)
  return _internal_org_height();
}
inline void VideoSizeChangedPlayerCoreMessage::_internal_set_org_height(int32_t value) {
  
  org_height_ = value;
}
inline void VideoSizeChangedPlayerCoreMessage::set_org_height(int32_t value) {
  _internal_set_org_height(value);
  // @@protoc_insertion_point(field_set:player_protobuf.VideoSizeChangedPlayerCoreMessage.org_height)
}

// -------------------------------------------------------------------

// PreparePlayerCoreMessage

// int32 player_id = 1;
inline void PreparePlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t PreparePlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t PreparePlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PreparePlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void PreparePlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void PreparePlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PreparePlayerCoreMessage.player_id)
}

// int32 duration = 2;
inline void PreparePlayerCoreMessage::clear_duration() {
  duration_ = 0;
}
inline int32_t PreparePlayerCoreMessage::_internal_duration() const {
  return duration_;
}
inline int32_t PreparePlayerCoreMessage::duration() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PreparePlayerCoreMessage.duration)
  return _internal_duration();
}
inline void PreparePlayerCoreMessage::_internal_set_duration(int32_t value) {
  
  duration_ = value;
}
inline void PreparePlayerCoreMessage::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PreparePlayerCoreMessage.duration)
}

// -------------------------------------------------------------------

// StatePlayerCoreMessage

// int32 player_id = 1;
inline void StatePlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t StatePlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t StatePlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StatePlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void StatePlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void StatePlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StatePlayerCoreMessage.player_id)
}

// int32 state = 2;
inline void StatePlayerCoreMessage::clear_state() {
  state_ = 0;
}
inline int32_t StatePlayerCoreMessage::_internal_state() const {
  return state_;
}
inline int32_t StatePlayerCoreMessage::state() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StatePlayerCoreMessage.state)
  return _internal_state();
}
inline void StatePlayerCoreMessage::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void StatePlayerCoreMessage::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StatePlayerCoreMessage.state)
}

// -------------------------------------------------------------------

// AudioMutePlayerCoreMessage

// int32 player_id = 1;
inline void AudioMutePlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t AudioMutePlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t AudioMutePlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.AudioMutePlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void AudioMutePlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void AudioMutePlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.AudioMutePlayerCoreMessage.player_id)
}

// bool is_audio_mute = 2;
inline void AudioMutePlayerCoreMessage::clear_is_audio_mute() {
  is_audio_mute_ = false;
}
inline bool AudioMutePlayerCoreMessage::_internal_is_audio_mute() const {
  return is_audio_mute_;
}
inline bool AudioMutePlayerCoreMessage::is_audio_mute() const {
  // @@protoc_insertion_point(field_get:player_protobuf.AudioMutePlayerCoreMessage.is_audio_mute)
  return _internal_is_audio_mute();
}
inline void AudioMutePlayerCoreMessage::_internal_set_is_audio_mute(bool value) {
  
  is_audio_mute_ = value;
}
inline void AudioMutePlayerCoreMessage::set_is_audio_mute(bool value) {
  _internal_set_is_audio_mute(value);
  // @@protoc_insertion_point(field_set:player_protobuf.AudioMutePlayerCoreMessage.is_audio_mute)
}

// -------------------------------------------------------------------

// SeekToPlayerCoreMessage

// int32 player_id = 1;
inline void SeekToPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t SeekToPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t SeekToPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.SeekToPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void SeekToPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void SeekToPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.SeekToPlayerCoreMessage.player_id)
}

// int32 pos_ms = 2;
inline void SeekToPlayerCoreMessage::clear_pos_ms() {
  pos_ms_ = 0;
}
inline int32_t SeekToPlayerCoreMessage::_internal_pos_ms() const {
  return pos_ms_;
}
inline int32_t SeekToPlayerCoreMessage::pos_ms() const {
  // @@protoc_insertion_point(field_get:player_protobuf.SeekToPlayerCoreMessage.pos_ms)
  return _internal_pos_ms();
}
inline void SeekToPlayerCoreMessage::_internal_set_pos_ms(int32_t value) {
  
  pos_ms_ = value;
}
inline void SeekToPlayerCoreMessage::set_pos_ms(int32_t value) {
  _internal_set_pos_ms(value);
  // @@protoc_insertion_point(field_set:player_protobuf.SeekToPlayerCoreMessage.pos_ms)
}

// -------------------------------------------------------------------

// VideoSurfaceMessage

// int32 player_id = 1;
inline void VideoSurfaceMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t VideoSurfaceMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t VideoSurfaceMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.VideoSurfaceMessage.player_id)
  return _internal_player_id();
}
inline void VideoSurfaceMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void VideoSurfaceMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.VideoSurfaceMessage.player_id)
}

// int32 window = 2;
inline void VideoSurfaceMessage::clear_window() {
  window_ = 0;
}
inline int32_t VideoSurfaceMessage::_internal_window() const {
  return window_;
}
inline int32_t VideoSurfaceMessage::window() const {
  // @@protoc_insertion_point(field_get:player_protobuf.VideoSurfaceMessage.window)
  return _internal_window();
}
inline void VideoSurfaceMessage::_internal_set_window(int32_t value) {
  
  window_ = value;
}
inline void VideoSurfaceMessage::set_window(int32_t value) {
  _internal_set_window(value);
  // @@protoc_insertion_point(field_set:player_protobuf.VideoSurfaceMessage.window)
}

// -------------------------------------------------------------------

// AudioVolumePlayerCoreMessage

// int32 player_id = 1;
inline void AudioVolumePlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t AudioVolumePlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t AudioVolumePlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.AudioVolumePlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void AudioVolumePlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void AudioVolumePlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.AudioVolumePlayerCoreMessage.player_id)
}

// float audio_volume = 2;
inline void AudioVolumePlayerCoreMessage::clear_audio_volume() {
  audio_volume_ = 0;
}
inline float AudioVolumePlayerCoreMessage::_internal_audio_volume() const {
  return audio_volume_;
}
inline float AudioVolumePlayerCoreMessage::audio_volume() const {
  // @@protoc_insertion_point(field_get:player_protobuf.AudioVolumePlayerCoreMessage.audio_volume)
  return _internal_audio_volume();
}
inline void AudioVolumePlayerCoreMessage::_internal_set_audio_volume(float value) {
  
  audio_volume_ = value;
}
inline void AudioVolumePlayerCoreMessage::set_audio_volume(float value) {
  _internal_set_audio_volume(value);
  // @@protoc_insertion_point(field_set:player_protobuf.AudioVolumePlayerCoreMessage.audio_volume)
}

// -------------------------------------------------------------------

// RepeatPlayerCoreMessage

// int32 player_id = 1;
inline void RepeatPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t RepeatPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t RepeatPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.RepeatPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void RepeatPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void RepeatPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.RepeatPlayerCoreMessage.player_id)
}

// int32 is_repeat = 2;
inline void RepeatPlayerCoreMessage::clear_is_repeat() {
  is_repeat_ = 0;
}
inline int32_t RepeatPlayerCoreMessage::_internal_is_repeat() const {
  return is_repeat_;
}
inline int32_t RepeatPlayerCoreMessage::is_repeat() const {
  // @@protoc_insertion_point(field_get:player_protobuf.RepeatPlayerCoreMessage.is_repeat)
  return _internal_is_repeat();
}
inline void RepeatPlayerCoreMessage::_internal_set_is_repeat(int32_t value) {
  
  is_repeat_ = value;
}
inline void RepeatPlayerCoreMessage::set_is_repeat(int32_t value) {
  _internal_set_is_repeat(value);
  // @@protoc_insertion_point(field_set:player_protobuf.RepeatPlayerCoreMessage.is_repeat)
}

// -------------------------------------------------------------------

// SpeedRatioPlayerCoreMessage

// int32 player_id = 1;
inline void SpeedRatioPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t SpeedRatioPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t SpeedRatioPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.SpeedRatioPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void SpeedRatioPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void SpeedRatioPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.SpeedRatioPlayerCoreMessage.player_id)
}

// float speed_ratio = 2;
inline void SpeedRatioPlayerCoreMessage::clear_speed_ratio() {
  speed_ratio_ = 0;
}
inline float SpeedRatioPlayerCoreMessage::_internal_speed_ratio() const {
  return speed_ratio_;
}
inline float SpeedRatioPlayerCoreMessage::speed_ratio() const {
  // @@protoc_insertion_point(field_get:player_protobuf.SpeedRatioPlayerCoreMessage.speed_ratio)
  return _internal_speed_ratio();
}
inline void SpeedRatioPlayerCoreMessage::_internal_set_speed_ratio(float value) {
  
  speed_ratio_ = value;
}
inline void SpeedRatioPlayerCoreMessage::set_speed_ratio(float value) {
  _internal_set_speed_ratio(value);
  // @@protoc_insertion_point(field_set:player_protobuf.SpeedRatioPlayerCoreMessage.speed_ratio)
}

// -------------------------------------------------------------------

// ReadyDataSourceCoreMessage

// int32 player_id = 1;
inline void ReadyDataSourceCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t ReadyDataSourceCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t ReadyDataSourceCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ReadyDataSourceCoreMessage.player_id)
  return _internal_player_id();
}
inline void ReadyDataSourceCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void ReadyDataSourceCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ReadyDataSourceCoreMessage.player_id)
}

// string file_name = 2;
inline void ReadyDataSourceCoreMessage::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& ReadyDataSourceCoreMessage::file_name() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ReadyDataSourceCoreMessage.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadyDataSourceCoreMessage::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.ReadyDataSourceCoreMessage.file_name)
}
inline std::string* ReadyDataSourceCoreMessage::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:player_protobuf.ReadyDataSourceCoreMessage.file_name)
  return _s;
}
inline const std::string& ReadyDataSourceCoreMessage::_internal_file_name() const {
  return file_name_.Get();
}
inline void ReadyDataSourceCoreMessage::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadyDataSourceCoreMessage::_internal_mutable_file_name() {
  
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadyDataSourceCoreMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:player_protobuf.ReadyDataSourceCoreMessage.file_name)
  return file_name_.Release();
}
inline void ReadyDataSourceCoreMessage::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.ReadyDataSourceCoreMessage.file_name)
}

// string file_path = 3;
inline void ReadyDataSourceCoreMessage::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& ReadyDataSourceCoreMessage::file_path() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ReadyDataSourceCoreMessage.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadyDataSourceCoreMessage::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.ReadyDataSourceCoreMessage.file_path)
}
inline std::string* ReadyDataSourceCoreMessage::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:player_protobuf.ReadyDataSourceCoreMessage.file_path)
  return _s;
}
inline const std::string& ReadyDataSourceCoreMessage::_internal_file_path() const {
  return file_path_.Get();
}
inline void ReadyDataSourceCoreMessage::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadyDataSourceCoreMessage::_internal_mutable_file_path() {
  
  return file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadyDataSourceCoreMessage::release_file_path() {
  // @@protoc_insertion_point(field_release:player_protobuf.ReadyDataSourceCoreMessage.file_path)
  return file_path_.Release();
}
inline void ReadyDataSourceCoreMessage::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.ReadyDataSourceCoreMessage.file_path)
}

// int64 media_id = 4;
inline void ReadyDataSourceCoreMessage::clear_media_id() {
  media_id_ = int64_t{0};
}
inline int64_t ReadyDataSourceCoreMessage::_internal_media_id() const {
  return media_id_;
}
inline int64_t ReadyDataSourceCoreMessage::media_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ReadyDataSourceCoreMessage.media_id)
  return _internal_media_id();
}
inline void ReadyDataSourceCoreMessage::_internal_set_media_id(int64_t value) {
  
  media_id_ = value;
}
inline void ReadyDataSourceCoreMessage::set_media_id(int64_t value) {
  _internal_set_media_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ReadyDataSourceCoreMessage.media_id)
}

// -------------------------------------------------------------------

// DownloadDataSourceCoreMessage

// int32 player_id = 1;
inline void DownloadDataSourceCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t DownloadDataSourceCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t DownloadDataSourceCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.DownloadDataSourceCoreMessage.player_id)
  return _internal_player_id();
}
inline void DownloadDataSourceCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void DownloadDataSourceCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.DownloadDataSourceCoreMessage.player_id)
}

// string file_name = 2;
inline void DownloadDataSourceCoreMessage::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& DownloadDataSourceCoreMessage::file_name() const {
  // @@protoc_insertion_point(field_get:player_protobuf.DownloadDataSourceCoreMessage.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadDataSourceCoreMessage::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.DownloadDataSourceCoreMessage.file_name)
}
inline std::string* DownloadDataSourceCoreMessage::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:player_protobuf.DownloadDataSourceCoreMessage.file_name)
  return _s;
}
inline const std::string& DownloadDataSourceCoreMessage::_internal_file_name() const {
  return file_name_.Get();
}
inline void DownloadDataSourceCoreMessage::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadDataSourceCoreMessage::_internal_mutable_file_name() {
  
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadDataSourceCoreMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:player_protobuf.DownloadDataSourceCoreMessage.file_name)
  return file_name_.Release();
}
inline void DownloadDataSourceCoreMessage::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.DownloadDataSourceCoreMessage.file_name)
}

// string file_path = 3;
inline void DownloadDataSourceCoreMessage::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& DownloadDataSourceCoreMessage::file_path() const {
  // @@protoc_insertion_point(field_get:player_protobuf.DownloadDataSourceCoreMessage.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DownloadDataSourceCoreMessage::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.DownloadDataSourceCoreMessage.file_path)
}
inline std::string* DownloadDataSourceCoreMessage::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:player_protobuf.DownloadDataSourceCoreMessage.file_path)
  return _s;
}
inline const std::string& DownloadDataSourceCoreMessage::_internal_file_path() const {
  return file_path_.Get();
}
inline void DownloadDataSourceCoreMessage::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* DownloadDataSourceCoreMessage::_internal_mutable_file_path() {
  
  return file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* DownloadDataSourceCoreMessage::release_file_path() {
  // @@protoc_insertion_point(field_release:player_protobuf.DownloadDataSourceCoreMessage.file_path)
  return file_path_.Release();
}
inline void DownloadDataSourceCoreMessage::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.DownloadDataSourceCoreMessage.file_path)
}

// int64 file_size = 4;
inline void DownloadDataSourceCoreMessage::clear_file_size() {
  file_size_ = int64_t{0};
}
inline int64_t DownloadDataSourceCoreMessage::_internal_file_size() const {
  return file_size_;
}
inline int64_t DownloadDataSourceCoreMessage::file_size() const {
  // @@protoc_insertion_point(field_get:player_protobuf.DownloadDataSourceCoreMessage.file_size)
  return _internal_file_size();
}
inline void DownloadDataSourceCoreMessage::_internal_set_file_size(int64_t value) {
  
  file_size_ = value;
}
inline void DownloadDataSourceCoreMessage::set_file_size(int64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:player_protobuf.DownloadDataSourceCoreMessage.file_size)
}

// int64 media_id = 5;
inline void DownloadDataSourceCoreMessage::clear_media_id() {
  media_id_ = int64_t{0};
}
inline int64_t DownloadDataSourceCoreMessage::_internal_media_id() const {
  return media_id_;
}
inline int64_t DownloadDataSourceCoreMessage::media_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.DownloadDataSourceCoreMessage.media_id)
  return _internal_media_id();
}
inline void DownloadDataSourceCoreMessage::_internal_set_media_id(int64_t value) {
  
  media_id_ = value;
}
inline void DownloadDataSourceCoreMessage::set_media_id(int64_t value) {
  _internal_set_media_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.DownloadDataSourceCoreMessage.media_id)
}

// -------------------------------------------------------------------

// ErrorPlayerCoreMessage

// int32 player_id = 1;
inline void ErrorPlayerCoreMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t ErrorPlayerCoreMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t ErrorPlayerCoreMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ErrorPlayerCoreMessage.player_id)
  return _internal_player_id();
}
inline void ErrorPlayerCoreMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void ErrorPlayerCoreMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ErrorPlayerCoreMessage.player_id)
}

// string error = 2;
inline void ErrorPlayerCoreMessage::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ErrorPlayerCoreMessage::error() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ErrorPlayerCoreMessage.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorPlayerCoreMessage::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:player_protobuf.ErrorPlayerCoreMessage.error)
}
inline std::string* ErrorPlayerCoreMessage::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:player_protobuf.ErrorPlayerCoreMessage.error)
  return _s;
}
inline const std::string& ErrorPlayerCoreMessage::_internal_error() const {
  return error_.Get();
}
inline void ErrorPlayerCoreMessage::_internal_set_error(const std::string& value) {
  
  error_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrorPlayerCoreMessage::_internal_mutable_error() {
  
  return error_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrorPlayerCoreMessage::release_error() {
  // @@protoc_insertion_point(field_release:player_protobuf.ErrorPlayerCoreMessage.error)
  return error_.Release();
}
inline void ErrorPlayerCoreMessage::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault()) {
    error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:player_protobuf.ErrorPlayerCoreMessage.error)
}

// int32 error_type = 3;
inline void ErrorPlayerCoreMessage::clear_error_type() {
  error_type_ = 0;
}
inline int32_t ErrorPlayerCoreMessage::_internal_error_type() const {
  return error_type_;
}
inline int32_t ErrorPlayerCoreMessage::error_type() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ErrorPlayerCoreMessage.error_type)
  return _internal_error_type();
}
inline void ErrorPlayerCoreMessage::_internal_set_error_type(int32_t value) {
  
  error_type_ = value;
}
inline void ErrorPlayerCoreMessage::set_error_type(int32_t value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ErrorPlayerCoreMessage.error_type)
}

// int32 error_code = 4;
inline void ErrorPlayerCoreMessage::clear_error_code() {
  error_code_ = 0;
}
inline int32_t ErrorPlayerCoreMessage::_internal_error_code() const {
  return error_code_;
}
inline int32_t ErrorPlayerCoreMessage::error_code() const {
  // @@protoc_insertion_point(field_get:player_protobuf.ErrorPlayerCoreMessage.error_code)
  return _internal_error_code();
}
inline void ErrorPlayerCoreMessage::_internal_set_error_code(int32_t value) {
  
  error_code_ = value;
}
inline void ErrorPlayerCoreMessage::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:player_protobuf.ErrorPlayerCoreMessage.error_code)
}

// -------------------------------------------------------------------

// StartTaskProxyMessage

// int32 task_id = 1;
inline void StartTaskProxyMessage::clear_task_id() {
  task_id_ = 0;
}
inline int32_t StartTaskProxyMessage::_internal_task_id() const {
  return task_id_;
}
inline int32_t StartTaskProxyMessage::task_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StartTaskProxyMessage.task_id)
  return _internal_task_id();
}
inline void StartTaskProxyMessage::_internal_set_task_id(int32_t value) {
  
  task_id_ = value;
}
inline void StartTaskProxyMessage::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StartTaskProxyMessage.task_id)
}

// int32 player_id = 2;
inline void StartTaskProxyMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t StartTaskProxyMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t StartTaskProxyMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StartTaskProxyMessage.player_id)
  return _internal_player_id();
}
inline void StartTaskProxyMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void StartTaskProxyMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StartTaskProxyMessage.player_id)
}

// -------------------------------------------------------------------

// StartRequestProxyMessage

// int32 task_id = 1;
inline void StartRequestProxyMessage::clear_task_id() {
  task_id_ = 0;
}
inline int32_t StartRequestProxyMessage::_internal_task_id() const {
  return task_id_;
}
inline int32_t StartRequestProxyMessage::task_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StartRequestProxyMessage.task_id)
  return _internal_task_id();
}
inline void StartRequestProxyMessage::_internal_set_task_id(int32_t value) {
  
  task_id_ = value;
}
inline void StartRequestProxyMessage::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StartRequestProxyMessage.task_id)
}

// int32 player_id = 2;
inline void StartRequestProxyMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t StartRequestProxyMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t StartRequestProxyMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StartRequestProxyMessage.player_id)
  return _internal_player_id();
}
inline void StartRequestProxyMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void StartRequestProxyMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StartRequestProxyMessage.player_id)
}

// int32 request_start = 3;
inline void StartRequestProxyMessage::clear_request_start() {
  request_start_ = 0;
}
inline int32_t StartRequestProxyMessage::_internal_request_start() const {
  return request_start_;
}
inline int32_t StartRequestProxyMessage::request_start() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StartRequestProxyMessage.request_start)
  return _internal_request_start();
}
inline void StartRequestProxyMessage::_internal_set_request_start(int32_t value) {
  
  request_start_ = value;
}
inline void StartRequestProxyMessage::set_request_start(int32_t value) {
  _internal_set_request_start(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StartRequestProxyMessage.request_start)
}

// int32 request_end = 4;
inline void StartRequestProxyMessage::clear_request_end() {
  request_end_ = 0;
}
inline int32_t StartRequestProxyMessage::_internal_request_end() const {
  return request_end_;
}
inline int32_t StartRequestProxyMessage::request_end() const {
  // @@protoc_insertion_point(field_get:player_protobuf.StartRequestProxyMessage.request_end)
  return _internal_request_end();
}
inline void StartRequestProxyMessage::_internal_set_request_end(int32_t value) {
  
  request_end_ = value;
}
inline void StartRequestProxyMessage::set_request_end(int32_t value) {
  _internal_set_request_end(value);
  // @@protoc_insertion_point(field_set:player_protobuf.StartRequestProxyMessage.request_end)
}

// -------------------------------------------------------------------

// CloseRequestProxyMessage

// int32 task_id = 1;
inline void CloseRequestProxyMessage::clear_task_id() {
  task_id_ = 0;
}
inline int32_t CloseRequestProxyMessage::_internal_task_id() const {
  return task_id_;
}
inline int32_t CloseRequestProxyMessage::task_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CloseRequestProxyMessage.task_id)
  return _internal_task_id();
}
inline void CloseRequestProxyMessage::_internal_set_task_id(int32_t value) {
  
  task_id_ = value;
}
inline void CloseRequestProxyMessage::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CloseRequestProxyMessage.task_id)
}

// int32 player_id = 2;
inline void CloseRequestProxyMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t CloseRequestProxyMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t CloseRequestProxyMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.CloseRequestProxyMessage.player_id)
  return _internal_player_id();
}
inline void CloseRequestProxyMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void CloseRequestProxyMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.CloseRequestProxyMessage.player_id)
}

// -------------------------------------------------------------------

// PollingDataProxyReqMessage

// int32 task_id = 1;
inline void PollingDataProxyReqMessage::clear_task_id() {
  task_id_ = 0;
}
inline int32_t PollingDataProxyReqMessage::_internal_task_id() const {
  return task_id_;
}
inline int32_t PollingDataProxyReqMessage::task_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PollingDataProxyReqMessage.task_id)
  return _internal_task_id();
}
inline void PollingDataProxyReqMessage::_internal_set_task_id(int32_t value) {
  
  task_id_ = value;
}
inline void PollingDataProxyReqMessage::set_task_id(int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PollingDataProxyReqMessage.task_id)
}

// int32 player_id = 2;
inline void PollingDataProxyReqMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t PollingDataProxyReqMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t PollingDataProxyReqMessage::player_id() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PollingDataProxyReqMessage.player_id)
  return _internal_player_id();
}
inline void PollingDataProxyReqMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void PollingDataProxyReqMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PollingDataProxyReqMessage.player_id)
}

// int32 offset = 3;
inline void PollingDataProxyReqMessage::clear_offset() {
  offset_ = 0;
}
inline int32_t PollingDataProxyReqMessage::_internal_offset() const {
  return offset_;
}
inline int32_t PollingDataProxyReqMessage::offset() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PollingDataProxyReqMessage.offset)
  return _internal_offset();
}
inline void PollingDataProxyReqMessage::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void PollingDataProxyReqMessage::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PollingDataProxyReqMessage.offset)
}

// int32 ready_size = 4;
inline void PollingDataProxyReqMessage::clear_ready_size() {
  ready_size_ = 0;
}
inline int32_t PollingDataProxyReqMessage::_internal_ready_size() const {
  return ready_size_;
}
inline int32_t PollingDataProxyReqMessage::ready_size() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PollingDataProxyReqMessage.ready_size)
  return _internal_ready_size();
}
inline void PollingDataProxyReqMessage::_internal_set_ready_size(int32_t value) {
  
  ready_size_ = value;
}
inline void PollingDataProxyReqMessage::set_ready_size(int32_t value) {
  _internal_set_ready_size(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PollingDataProxyReqMessage.ready_size)
}

// int32 download_size = 5;
inline void PollingDataProxyReqMessage::clear_download_size() {
  download_size_ = 0;
}
inline int32_t PollingDataProxyReqMessage::_internal_download_size() const {
  return download_size_;
}
inline int32_t PollingDataProxyReqMessage::download_size() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PollingDataProxyReqMessage.download_size)
  return _internal_download_size();
}
inline void PollingDataProxyReqMessage::_internal_set_download_size(int32_t value) {
  
  download_size_ = value;
}
inline void PollingDataProxyReqMessage::set_download_size(int32_t value) {
  _internal_set_download_size(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PollingDataProxyReqMessage.download_size)
}

// int32 read_size = 6;
inline void PollingDataProxyReqMessage::clear_read_size() {
  read_size_ = 0;
}
inline int32_t PollingDataProxyReqMessage::_internal_read_size() const {
  return read_size_;
}
inline int32_t PollingDataProxyReqMessage::read_size() const {
  // @@protoc_insertion_point(field_get:player_protobuf.PollingDataProxyReqMessage.read_size)
  return _internal_read_size();
}
inline void PollingDataProxyReqMessage::_internal_set_read_size(int32_t value) {
  
  read_size_ = value;
}
inline void PollingDataProxyReqMessage::set_read_size(int32_t value) {
  _internal_set_read_size(value);
  // @@protoc_insertion_point(field_set:player_protobuf.PollingDataProxyReqMessage.read_size)
}

// -------------------------------------------------------------------

// PollingDataProxyRespMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player_protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_player_5fprotobuf_2eproto

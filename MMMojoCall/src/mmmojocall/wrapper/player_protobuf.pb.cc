// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_protobuf.proto

#include "player_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace player_protobuf {
PROTOBUF_CONSTEXPR InitReqMessage::InitReqMessage(
    ::_pbi::ConstantInitialized)
  : expire_timestamp_(0)
  , type_(0){}
struct InitReqMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitReqMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitReqMessageDefaultTypeInternal() {}
  union {
    InitReqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitReqMessageDefaultTypeInternal _InitReqMessage_default_instance_;
PROTOBUF_CONSTEXPR InitRespMessage::InitRespMessage(
    ::_pbi::ConstantInitialized)
  : status_(0){}
struct InitRespMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitRespMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitRespMessageDefaultTypeInternal() {}
  union {
    InitRespMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitRespMessageDefaultTypeInternal _InitRespMessage_default_instance_;
PROTOBUF_CONSTEXPR CreatePlayerCoreReqMessage::CreatePlayerCoreReqMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , is_post_frame_(0){}
struct CreatePlayerCoreReqMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatePlayerCoreReqMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatePlayerCoreReqMessageDefaultTypeInternal() {}
  union {
    CreatePlayerCoreReqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatePlayerCoreReqMessageDefaultTypeInternal _CreatePlayerCoreReqMessage_default_instance_;
PROTOBUF_CONSTEXPR CreatePlayerCoreRespMessage::CreatePlayerCoreRespMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , is_suceess_(0){}
struct CreatePlayerCoreRespMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatePlayerCoreRespMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatePlayerCoreRespMessageDefaultTypeInternal() {}
  union {
    CreatePlayerCoreRespMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatePlayerCoreRespMessageDefaultTypeInternal _CreatePlayerCoreRespMessage_default_instance_;
PROTOBUF_CONSTEXPR InitPlayerCoreMessage::InitPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , player_id_(0)
  , placeholder_6_(0)
  , file_size_(int64_t{0})
  , media_id_(int64_t{0})
  , is_local_(false)
  , is_audio_mute_(false)
  , audio_volume_(0)
  , video_surface_(int64_t{0})
  , is_repeat_(0)
  , speed_ratio_(0)
  , max_frame_width_(0)
  , max_frame_height_(0)
  , decoder_type_(int64_t{0})
  , codec_type_(0){}
struct InitPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitPlayerCoreMessageDefaultTypeInternal() {}
  union {
    InitPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitPlayerCoreMessageDefaultTypeInternal _InitPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR InfoPlayerCoreMessage::InfoPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , player_id_(0)
  , arg_(0)
  , unknown_2_(0){}
struct InfoPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoPlayerCoreMessageDefaultTypeInternal() {}
  union {
    InfoPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoPlayerCoreMessageDefaultTypeInternal _InfoPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayerIdMessage::PlayerIdMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0){}
struct PlayerIdMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerIdMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerIdMessageDefaultTypeInternal() {}
  union {
    PlayerIdMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerIdMessageDefaultTypeInternal _PlayerIdMessage_default_instance_;
PROTOBUF_CONSTEXPR CurrentPositionMsMessage::CurrentPositionMsMessage(
    ::_pbi::ConstantInitialized)
  : unknown_(0){}
struct CurrentPositionMsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentPositionMsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentPositionMsMessageDefaultTypeInternal() {}
  union {
    CurrentPositionMsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentPositionMsMessageDefaultTypeInternal _CurrentPositionMsMessage_default_instance_;
PROTOBUF_CONSTEXPR CurrentPositionMsInfo_MsInfo::CurrentPositionMsInfo_MsInfo(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , pos_(0){}
struct CurrentPositionMsInfo_MsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentPositionMsInfo_MsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentPositionMsInfo_MsInfoDefaultTypeInternal() {}
  union {
    CurrentPositionMsInfo_MsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentPositionMsInfo_MsInfoDefaultTypeInternal _CurrentPositionMsInfo_MsInfo_default_instance_;
PROTOBUF_CONSTEXPR CurrentPositionMsInfo::CurrentPositionMsInfo(
    ::_pbi::ConstantInitialized)
  : ms_info_(){}
struct CurrentPositionMsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentPositionMsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentPositionMsInfoDefaultTypeInternal() {}
  union {
    CurrentPositionMsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentPositionMsInfoDefaultTypeInternal _CurrentPositionMsInfo_default_instance_;
PROTOBUF_CONSTEXPR ResizePlayerCoreMessage::ResizePlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , new_width_(0)
  , new_height_(0){}
struct ResizePlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResizePlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResizePlayerCoreMessageDefaultTypeInternal() {}
  union {
    ResizePlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResizePlayerCoreMessageDefaultTypeInternal _ResizePlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR VideoSizeChangedPlayerCoreMessage::VideoSizeChangedPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , org_width_(0)
  , org_height_(0){}
struct VideoSizeChangedPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSizeChangedPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSizeChangedPlayerCoreMessageDefaultTypeInternal() {}
  union {
    VideoSizeChangedPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSizeChangedPlayerCoreMessageDefaultTypeInternal _VideoSizeChangedPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR PreparePlayerCoreMessage::PreparePlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , duration_(0){}
struct PreparePlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreparePlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreparePlayerCoreMessageDefaultTypeInternal() {}
  union {
    PreparePlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreparePlayerCoreMessageDefaultTypeInternal _PreparePlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR StatePlayerCoreMessage::StatePlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , state_(0){}
struct StatePlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatePlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatePlayerCoreMessageDefaultTypeInternal() {}
  union {
    StatePlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatePlayerCoreMessageDefaultTypeInternal _StatePlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR AudioMutePlayerCoreMessage::AudioMutePlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , is_audio_mute_(false){}
struct AudioMutePlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioMutePlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioMutePlayerCoreMessageDefaultTypeInternal() {}
  union {
    AudioMutePlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioMutePlayerCoreMessageDefaultTypeInternal _AudioMutePlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR SeekToPlayerCoreMessage::SeekToPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , pos_ms_(0){}
struct SeekToPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekToPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekToPlayerCoreMessageDefaultTypeInternal() {}
  union {
    SeekToPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekToPlayerCoreMessageDefaultTypeInternal _SeekToPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR VideoSurfaceMessage::VideoSurfaceMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , window_(0){}
struct VideoSurfaceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSurfaceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSurfaceMessageDefaultTypeInternal() {}
  union {
    VideoSurfaceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSurfaceMessageDefaultTypeInternal _VideoSurfaceMessage_default_instance_;
PROTOBUF_CONSTEXPR AudioVolumePlayerCoreMessage::AudioVolumePlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , audio_volume_(0){}
struct AudioVolumePlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioVolumePlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioVolumePlayerCoreMessageDefaultTypeInternal() {}
  union {
    AudioVolumePlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioVolumePlayerCoreMessageDefaultTypeInternal _AudioVolumePlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR RepeatPlayerCoreMessage::RepeatPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , is_repeat_(0){}
struct RepeatPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatPlayerCoreMessageDefaultTypeInternal() {}
  union {
    RepeatPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatPlayerCoreMessageDefaultTypeInternal _RepeatPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR SpeedRatioPlayerCoreMessage::SpeedRatioPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : player_id_(0)
  , speed_ratio_(0){}
struct SpeedRatioPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedRatioPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedRatioPlayerCoreMessageDefaultTypeInternal() {}
  union {
    SpeedRatioPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedRatioPlayerCoreMessageDefaultTypeInternal _SpeedRatioPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR ReadyDataSourceCoreMessage::ReadyDataSourceCoreMessage(
    ::_pbi::ConstantInitialized)
  : file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , media_id_(int64_t{0})
  , player_id_(0){}
struct ReadyDataSourceCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadyDataSourceCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadyDataSourceCoreMessageDefaultTypeInternal() {}
  union {
    ReadyDataSourceCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadyDataSourceCoreMessageDefaultTypeInternal _ReadyDataSourceCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR DownloadDataSourceCoreMessage::DownloadDataSourceCoreMessage(
    ::_pbi::ConstantInitialized)
  : file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_size_(int64_t{0})
  , media_id_(int64_t{0})
  , player_id_(0){}
struct DownloadDataSourceCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadDataSourceCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadDataSourceCoreMessageDefaultTypeInternal() {}
  union {
    DownloadDataSourceCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadDataSourceCoreMessageDefaultTypeInternal _DownloadDataSourceCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR ErrorPlayerCoreMessage::ErrorPlayerCoreMessage(
    ::_pbi::ConstantInitialized)
  : error_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , player_id_(0)
  , error_type_(0)
  , error_code_(0){}
struct ErrorPlayerCoreMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorPlayerCoreMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorPlayerCoreMessageDefaultTypeInternal() {}
  union {
    ErrorPlayerCoreMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorPlayerCoreMessageDefaultTypeInternal _ErrorPlayerCoreMessage_default_instance_;
PROTOBUF_CONSTEXPR StartTaskProxyMessage::StartTaskProxyMessage(
    ::_pbi::ConstantInitialized)
  : task_id_(0)
  , player_id_(0){}
struct StartTaskProxyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartTaskProxyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartTaskProxyMessageDefaultTypeInternal() {}
  union {
    StartTaskProxyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartTaskProxyMessageDefaultTypeInternal _StartTaskProxyMessage_default_instance_;
PROTOBUF_CONSTEXPR StartRequestProxyMessage::StartRequestProxyMessage(
    ::_pbi::ConstantInitialized)
  : task_id_(0)
  , player_id_(0)
  , request_start_(0)
  , request_end_(0){}
struct StartRequestProxyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRequestProxyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRequestProxyMessageDefaultTypeInternal() {}
  union {
    StartRequestProxyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRequestProxyMessageDefaultTypeInternal _StartRequestProxyMessage_default_instance_;
PROTOBUF_CONSTEXPR CloseRequestProxyMessage::CloseRequestProxyMessage(
    ::_pbi::ConstantInitialized)
  : task_id_(0)
  , player_id_(0){}
struct CloseRequestProxyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseRequestProxyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseRequestProxyMessageDefaultTypeInternal() {}
  union {
    CloseRequestProxyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseRequestProxyMessageDefaultTypeInternal _CloseRequestProxyMessage_default_instance_;
PROTOBUF_CONSTEXPR PollingDataProxyReqMessage::PollingDataProxyReqMessage(
    ::_pbi::ConstantInitialized)
  : task_id_(0)
  , player_id_(0)
  , offset_(0)
  , ready_size_(0)
  , download_size_(0)
  , read_size_(0){}
struct PollingDataProxyReqMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollingDataProxyReqMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollingDataProxyReqMessageDefaultTypeInternal() {}
  union {
    PollingDataProxyReqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollingDataProxyReqMessageDefaultTypeInternal _PollingDataProxyReqMessage_default_instance_;
PROTOBUF_CONSTEXPR PollingDataProxyRespMessage::PollingDataProxyRespMessage(
    ::_pbi::ConstantInitialized){}
struct PollingDataProxyRespMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollingDataProxyRespMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollingDataProxyRespMessageDefaultTypeInternal() {}
  union {
    PollingDataProxyRespMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollingDataProxyRespMessageDefaultTypeInternal _PollingDataProxyRespMessage_default_instance_;
}  // namespace player_protobuf
static ::_pb::Metadata file_level_metadata_player_5fprotobuf_2eproto[28];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_player_5fprotobuf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_player_5fprotobuf_2eproto = nullptr;

const uint32_t TableStruct_player_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitReqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitReqMessage, expire_timestamp_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitReqMessage, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitRespMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitRespMessage, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CreatePlayerCoreReqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CreatePlayerCoreReqMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CreatePlayerCoreReqMessage, is_post_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CreatePlayerCoreRespMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CreatePlayerCoreRespMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CreatePlayerCoreRespMessage, is_suceess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, file_name_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, file_path_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, file_size_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, is_local_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, placeholder_6_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, media_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, is_audio_mute_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, video_surface_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, audio_volume_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, is_repeat_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, max_frame_width_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, max_frame_height_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, codec_type_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InitPlayerCoreMessage, decoder_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InfoPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InfoPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InfoPlayerCoreMessage, type_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InfoPlayerCoreMessage, arg_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::InfoPlayerCoreMessage, unknown_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PlayerIdMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PlayerIdMessage, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsMessage, unknown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsInfo_MsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsInfo_MsInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsInfo_MsInfo, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CurrentPositionMsInfo, ms_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ResizePlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ResizePlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ResizePlayerCoreMessage, new_width_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ResizePlayerCoreMessage, new_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSizeChangedPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSizeChangedPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSizeChangedPlayerCoreMessage, org_width_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSizeChangedPlayerCoreMessage, org_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PreparePlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PreparePlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PreparePlayerCoreMessage, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StatePlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StatePlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StatePlayerCoreMessage, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::AudioMutePlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::AudioMutePlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::AudioMutePlayerCoreMessage, is_audio_mute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::SeekToPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::SeekToPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::SeekToPlayerCoreMessage, pos_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSurfaceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSurfaceMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::VideoSurfaceMessage, window_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::AudioVolumePlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::AudioVolumePlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::AudioVolumePlayerCoreMessage, audio_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::RepeatPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::RepeatPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::RepeatPlayerCoreMessage, is_repeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::SpeedRatioPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::SpeedRatioPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::SpeedRatioPlayerCoreMessage, speed_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ReadyDataSourceCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ReadyDataSourceCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ReadyDataSourceCoreMessage, file_name_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ReadyDataSourceCoreMessage, file_path_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ReadyDataSourceCoreMessage, media_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::DownloadDataSourceCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::DownloadDataSourceCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::DownloadDataSourceCoreMessage, file_name_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::DownloadDataSourceCoreMessage, file_path_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::DownloadDataSourceCoreMessage, file_size_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::DownloadDataSourceCoreMessage, media_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ErrorPlayerCoreMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ErrorPlayerCoreMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ErrorPlayerCoreMessage, error_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ErrorPlayerCoreMessage, error_type_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::ErrorPlayerCoreMessage, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartTaskProxyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartTaskProxyMessage, task_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartTaskProxyMessage, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartRequestProxyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartRequestProxyMessage, task_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartRequestProxyMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartRequestProxyMessage, request_start_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::StartRequestProxyMessage, request_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CloseRequestProxyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CloseRequestProxyMessage, task_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::CloseRequestProxyMessage, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, task_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, offset_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, ready_size_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, download_size_),
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyReqMessage, read_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::player_protobuf::PollingDataProxyRespMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::player_protobuf::InitReqMessage)},
  { 8, -1, -1, sizeof(::player_protobuf::InitRespMessage)},
  { 15, -1, -1, sizeof(::player_protobuf::CreatePlayerCoreReqMessage)},
  { 23, -1, -1, sizeof(::player_protobuf::CreatePlayerCoreRespMessage)},
  { 31, -1, -1, sizeof(::player_protobuf::InitPlayerCoreMessage)},
  { 53, -1, -1, sizeof(::player_protobuf::InfoPlayerCoreMessage)},
  { 63, -1, -1, sizeof(::player_protobuf::PlayerIdMessage)},
  { 70, -1, -1, sizeof(::player_protobuf::CurrentPositionMsMessage)},
  { 77, -1, -1, sizeof(::player_protobuf::CurrentPositionMsInfo_MsInfo)},
  { 85, -1, -1, sizeof(::player_protobuf::CurrentPositionMsInfo)},
  { 92, -1, -1, sizeof(::player_protobuf::ResizePlayerCoreMessage)},
  { 101, -1, -1, sizeof(::player_protobuf::VideoSizeChangedPlayerCoreMessage)},
  { 110, -1, -1, sizeof(::player_protobuf::PreparePlayerCoreMessage)},
  { 118, -1, -1, sizeof(::player_protobuf::StatePlayerCoreMessage)},
  { 126, -1, -1, sizeof(::player_protobuf::AudioMutePlayerCoreMessage)},
  { 134, -1, -1, sizeof(::player_protobuf::SeekToPlayerCoreMessage)},
  { 142, -1, -1, sizeof(::player_protobuf::VideoSurfaceMessage)},
  { 150, -1, -1, sizeof(::player_protobuf::AudioVolumePlayerCoreMessage)},
  { 158, -1, -1, sizeof(::player_protobuf::RepeatPlayerCoreMessage)},
  { 166, -1, -1, sizeof(::player_protobuf::SpeedRatioPlayerCoreMessage)},
  { 174, -1, -1, sizeof(::player_protobuf::ReadyDataSourceCoreMessage)},
  { 184, -1, -1, sizeof(::player_protobuf::DownloadDataSourceCoreMessage)},
  { 195, -1, -1, sizeof(::player_protobuf::ErrorPlayerCoreMessage)},
  { 205, -1, -1, sizeof(::player_protobuf::StartTaskProxyMessage)},
  { 213, -1, -1, sizeof(::player_protobuf::StartRequestProxyMessage)},
  { 223, -1, -1, sizeof(::player_protobuf::CloseRequestProxyMessage)},
  { 231, -1, -1, sizeof(::player_protobuf::PollingDataProxyReqMessage)},
  { 243, -1, -1, sizeof(::player_protobuf::PollingDataProxyRespMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::player_protobuf::_InitReqMessage_default_instance_._instance,
  &::player_protobuf::_InitRespMessage_default_instance_._instance,
  &::player_protobuf::_CreatePlayerCoreReqMessage_default_instance_._instance,
  &::player_protobuf::_CreatePlayerCoreRespMessage_default_instance_._instance,
  &::player_protobuf::_InitPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_InfoPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_PlayerIdMessage_default_instance_._instance,
  &::player_protobuf::_CurrentPositionMsMessage_default_instance_._instance,
  &::player_protobuf::_CurrentPositionMsInfo_MsInfo_default_instance_._instance,
  &::player_protobuf::_CurrentPositionMsInfo_default_instance_._instance,
  &::player_protobuf::_ResizePlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_VideoSizeChangedPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_PreparePlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_StatePlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_AudioMutePlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_SeekToPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_VideoSurfaceMessage_default_instance_._instance,
  &::player_protobuf::_AudioVolumePlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_RepeatPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_SpeedRatioPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_ReadyDataSourceCoreMessage_default_instance_._instance,
  &::player_protobuf::_DownloadDataSourceCoreMessage_default_instance_._instance,
  &::player_protobuf::_ErrorPlayerCoreMessage_default_instance_._instance,
  &::player_protobuf::_StartTaskProxyMessage_default_instance_._instance,
  &::player_protobuf::_StartRequestProxyMessage_default_instance_._instance,
  &::player_protobuf::_CloseRequestProxyMessage_default_instance_._instance,
  &::player_protobuf::_PollingDataProxyReqMessage_default_instance_._instance,
  &::player_protobuf::_PollingDataProxyRespMessage_default_instance_._instance,
};

const char descriptor_table_protodef_player_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025player_protobuf.proto\022\017player_protobuf"
  "\"8\n\016InitReqMessage\022\030\n\020expire_timestamp\030\001"
  " \001(\005\022\014\n\004type\030\002 \001(\005\"!\n\017InitRespMessage\022\016\n"
  "\006status\030\001 \001(\005\"F\n\032CreatePlayerCoreReqMess"
  "age\022\021\n\tplayer_id\030\001 \001(\005\022\025\n\ris_post_frame\030"
  "\002 \001(\005\"D\n\033CreatePlayerCoreRespMessage\022\021\n\t"
  "player_id\030\001 \001(\005\022\022\n\nis_suceess\030\002 \001(\005\"\347\002\n\025"
  "InitPlayerCoreMessage\022\021\n\tplayer_id\030\001 \001(\005"
  "\022\021\n\tfile_name\030\002 \001(\t\022\021\n\tfile_path\030\003 \001(\t\022\021"
  "\n\tfile_size\030\004 \001(\003\022\020\n\010is_local\030\005 \001(\010\022\025\n\rp"
  "laceholder_6\030\006 \001(\005\022\020\n\010media_id\030\007 \001(\003\022\025\n\r"
  "is_audio_mute\030\010 \001(\010\022\025\n\rvideo_surface\030\t \001"
  "(\003\022\024\n\014audio_volume\030\n \001(\002\022\021\n\tis_repeat\030\013 "
  "\001(\005\022\023\n\013speed_ratio\030\014 \001(\002\022\027\n\017max_frame_wi"
  "dth\030\r \001(\005\022\030\n\020max_frame_height\030\016 \001(\005\022\022\n\nc"
  "odec_type\030\017 \001(\005\022\024\n\014decoder_type\030\020 \001(\003\"X\n"
  "\025InfoPlayerCoreMessage\022\021\n\tplayer_id\030\001 \001("
  "\005\022\014\n\004type\030\002 \001(\t\022\013\n\003arg\030\003 \001(\005\022\021\n\tunknown_"
  "2\030\004 \001(\005\"$\n\017PlayerIdMessage\022\021\n\tplayer_id\030"
  "\001 \001(\005\"+\n\030CurrentPositionMsMessage\022\017\n\007unk"
  "nown\030\001 \001(\005\"R\n\025CurrentPositionMsInfo\022\017\n\007m"
  "s_info\030\001 \003(\014\032(\n\006MsInfo\022\021\n\tplayer_id\030\001 \001("
  "\005\022\013\n\003pos\030\002 \001(\005\"S\n\027ResizePlayerCoreMessag"
  "e\022\021\n\tplayer_id\030\001 \001(\005\022\021\n\tnew_width\030\002 \001(\005\022"
  "\022\n\nnew_height\030\003 \001(\005\"]\n!VideoSizeChangedP"
  "layerCoreMessage\022\021\n\tplayer_id\030\001 \001(\005\022\021\n\to"
  "rg_width\030\002 \001(\005\022\022\n\norg_height\030\003 \001(\005\"\?\n\030Pr"
  "eparePlayerCoreMessage\022\021\n\tplayer_id\030\001 \001("
  "\005\022\020\n\010duration\030\002 \001(\005\":\n\026StatePlayerCoreMe"
  "ssage\022\021\n\tplayer_id\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\""
  "F\n\032AudioMutePlayerCoreMessage\022\021\n\tplayer_"
  "id\030\001 \001(\005\022\025\n\ris_audio_mute\030\002 \001(\010\"<\n\027SeekT"
  "oPlayerCoreMessage\022\021\n\tplayer_id\030\001 \001(\005\022\016\n"
  "\006pos_ms\030\002 \001(\005\"8\n\023VideoSurfaceMessage\022\021\n\t"
  "player_id\030\001 \001(\005\022\016\n\006window\030\002 \001(\005\"G\n\034Audio"
  "VolumePlayerCoreMessage\022\021\n\tplayer_id\030\001 \001"
  "(\005\022\024\n\014audio_volume\030\002 \001(\002\"\?\n\027RepeatPlayer"
  "CoreMessage\022\021\n\tplayer_id\030\001 \001(\005\022\021\n\tis_rep"
  "eat\030\002 \001(\005\"E\n\033SpeedRatioPlayerCoreMessage"
  "\022\021\n\tplayer_id\030\001 \001(\005\022\023\n\013speed_ratio\030\002 \001(\002"
  "\"g\n\032ReadyDataSourceCoreMessage\022\021\n\tplayer"
  "_id\030\001 \001(\005\022\021\n\tfile_name\030\002 \001(\t\022\021\n\tfile_pat"
  "h\030\003 \001(\t\022\020\n\010media_id\030\004 \001(\003\"}\n\035DownloadDat"
  "aSourceCoreMessage\022\021\n\tplayer_id\030\001 \001(\005\022\021\n"
  "\tfile_name\030\002 \001(\t\022\021\n\tfile_path\030\003 \001(\t\022\021\n\tf"
  "ile_size\030\004 \001(\003\022\020\n\010media_id\030\005 \001(\003\"b\n\026Erro"
  "rPlayerCoreMessage\022\021\n\tplayer_id\030\001 \001(\005\022\r\n"
  "\005error\030\002 \001(\t\022\022\n\nerror_type\030\003 \001(\005\022\022\n\nerro"
  "r_code\030\004 \001(\005\";\n\025StartTaskProxyMessage\022\017\n"
  "\007task_id\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\"j\n\030Sta"
  "rtRequestProxyMessage\022\017\n\007task_id\030\001 \001(\005\022\021"
  "\n\tplayer_id\030\002 \001(\005\022\025\n\rrequest_start\030\003 \001(\005"
  "\022\023\n\013request_end\030\004 \001(\005\">\n\030CloseRequestPro"
  "xyMessage\022\017\n\007task_id\030\001 \001(\005\022\021\n\tplayer_id\030"
  "\002 \001(\005\"\216\001\n\032PollingDataProxyReqMessage\022\017\n\007"
  "task_id\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\022\016\n\006offs"
  "et\030\003 \001(\005\022\022\n\nready_size\030\004 \001(\005\022\025\n\rdownload"
  "_size\030\005 \001(\005\022\021\n\tread_size\030\006 \001(\005\"\035\n\033Pollin"
  "gDataProxyRespMessageb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_player_5fprotobuf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_player_5fprotobuf_2eproto = {
    false, false, 2349, descriptor_table_protodef_player_5fprotobuf_2eproto,
    "player_protobuf.proto",
    &descriptor_table_player_5fprotobuf_2eproto_once, nullptr, 0, 28,
    schemas, file_default_instances, TableStruct_player_5fprotobuf_2eproto::offsets,
    file_level_metadata_player_5fprotobuf_2eproto, file_level_enum_descriptors_player_5fprotobuf_2eproto,
    file_level_service_descriptors_player_5fprotobuf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_player_5fprotobuf_2eproto_getter() {
  return &descriptor_table_player_5fprotobuf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_player_5fprotobuf_2eproto(&descriptor_table_player_5fprotobuf_2eproto);
namespace player_protobuf {

// ===================================================================

class InitReqMessage::_Internal {
 public:
};

InitReqMessage::InitReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.InitReqMessage)
}
InitReqMessage::InitReqMessage(const InitReqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&expire_timestamp_, &from.expire_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&expire_timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.InitReqMessage)
}

inline void InitReqMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expire_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&expire_timestamp_)) + sizeof(type_));
}

InitReqMessage::~InitReqMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.InitReqMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitReqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitReqMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitReqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.InitReqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&expire_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&expire_timestamp_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitReqMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 expire_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          expire_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitReqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.InitReqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 expire_timestamp = 1;
  if (this->_internal_expire_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_expire_timestamp(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.InitReqMessage)
  return target;
}

size_t InitReqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.InitReqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 expire_timestamp = 1;
  if (this->_internal_expire_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expire_timestamp());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitReqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitReqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitReqMessage::GetClassData() const { return &_class_data_; }

void InitReqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitReqMessage *>(to)->MergeFrom(
      static_cast<const InitReqMessage &>(from));
}


void InitReqMessage::MergeFrom(const InitReqMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.InitReqMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_expire_timestamp() != 0) {
    _internal_set_expire_timestamp(from._internal_expire_timestamp());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitReqMessage::CopyFrom(const InitReqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.InitReqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitReqMessage::IsInitialized() const {
  return true;
}

void InitReqMessage::InternalSwap(InitReqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitReqMessage, type_)
      + sizeof(InitReqMessage::type_)
      - PROTOBUF_FIELD_OFFSET(InitReqMessage, expire_timestamp_)>(
          reinterpret_cast<char*>(&expire_timestamp_),
          reinterpret_cast<char*>(&other->expire_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitReqMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[0]);
}

// ===================================================================

class InitRespMessage::_Internal {
 public:
};

InitRespMessage::InitRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.InitRespMessage)
}
InitRespMessage::InitRespMessage(const InitRespMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:player_protobuf.InitRespMessage)
}

inline void InitRespMessage::SharedCtor() {
status_ = 0;
}

InitRespMessage::~InitRespMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.InitRespMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitRespMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitRespMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitRespMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.InitRespMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitRespMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitRespMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.InitRespMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.InitRespMessage)
  return target;
}

size_t InitRespMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.InitRespMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitRespMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitRespMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitRespMessage::GetClassData() const { return &_class_data_; }

void InitRespMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitRespMessage *>(to)->MergeFrom(
      static_cast<const InitRespMessage &>(from));
}


void InitRespMessage::MergeFrom(const InitRespMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.InitRespMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitRespMessage::CopyFrom(const InitRespMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.InitRespMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRespMessage::IsInitialized() const {
  return true;
}

void InitRespMessage::InternalSwap(InitRespMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitRespMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[1]);
}

// ===================================================================

class CreatePlayerCoreReqMessage::_Internal {
 public:
};

CreatePlayerCoreReqMessage::CreatePlayerCoreReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.CreatePlayerCoreReqMessage)
}
CreatePlayerCoreReqMessage::CreatePlayerCoreReqMessage(const CreatePlayerCoreReqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_post_frame_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_post_frame_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.CreatePlayerCoreReqMessage)
}

inline void CreatePlayerCoreReqMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_post_frame_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_post_frame_));
}

CreatePlayerCoreReqMessage::~CreatePlayerCoreReqMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.CreatePlayerCoreReqMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatePlayerCoreReqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreatePlayerCoreReqMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreatePlayerCoreReqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.CreatePlayerCoreReqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_post_frame_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(is_post_frame_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePlayerCoreReqMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_post_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_post_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatePlayerCoreReqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.CreatePlayerCoreReqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 is_post_frame = 2;
  if (this->_internal_is_post_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_post_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.CreatePlayerCoreReqMessage)
  return target;
}

size_t CreatePlayerCoreReqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.CreatePlayerCoreReqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 is_post_frame = 2;
  if (this->_internal_is_post_frame() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_post_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePlayerCoreReqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreatePlayerCoreReqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePlayerCoreReqMessage::GetClassData() const { return &_class_data_; }

void CreatePlayerCoreReqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreatePlayerCoreReqMessage *>(to)->MergeFrom(
      static_cast<const CreatePlayerCoreReqMessage &>(from));
}


void CreatePlayerCoreReqMessage::MergeFrom(const CreatePlayerCoreReqMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.CreatePlayerCoreReqMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_is_post_frame() != 0) {
    _internal_set_is_post_frame(from._internal_is_post_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePlayerCoreReqMessage::CopyFrom(const CreatePlayerCoreReqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.CreatePlayerCoreReqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerCoreReqMessage::IsInitialized() const {
  return true;
}

void CreatePlayerCoreReqMessage::InternalSwap(CreatePlayerCoreReqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePlayerCoreReqMessage, is_post_frame_)
      + sizeof(CreatePlayerCoreReqMessage::is_post_frame_)
      - PROTOBUF_FIELD_OFFSET(CreatePlayerCoreReqMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePlayerCoreReqMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[2]);
}

// ===================================================================

class CreatePlayerCoreRespMessage::_Internal {
 public:
};

CreatePlayerCoreRespMessage::CreatePlayerCoreRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.CreatePlayerCoreRespMessage)
}
CreatePlayerCoreRespMessage::CreatePlayerCoreRespMessage(const CreatePlayerCoreRespMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_suceess_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_suceess_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.CreatePlayerCoreRespMessage)
}

inline void CreatePlayerCoreRespMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_suceess_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_suceess_));
}

CreatePlayerCoreRespMessage::~CreatePlayerCoreRespMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.CreatePlayerCoreRespMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatePlayerCoreRespMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreatePlayerCoreRespMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreatePlayerCoreRespMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.CreatePlayerCoreRespMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_suceess_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(is_suceess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePlayerCoreRespMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_suceess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_suceess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatePlayerCoreRespMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.CreatePlayerCoreRespMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 is_suceess = 2;
  if (this->_internal_is_suceess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_suceess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.CreatePlayerCoreRespMessage)
  return target;
}

size_t CreatePlayerCoreRespMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.CreatePlayerCoreRespMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 is_suceess = 2;
  if (this->_internal_is_suceess() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_suceess());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePlayerCoreRespMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreatePlayerCoreRespMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePlayerCoreRespMessage::GetClassData() const { return &_class_data_; }

void CreatePlayerCoreRespMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreatePlayerCoreRespMessage *>(to)->MergeFrom(
      static_cast<const CreatePlayerCoreRespMessage &>(from));
}


void CreatePlayerCoreRespMessage::MergeFrom(const CreatePlayerCoreRespMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.CreatePlayerCoreRespMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_is_suceess() != 0) {
    _internal_set_is_suceess(from._internal_is_suceess());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePlayerCoreRespMessage::CopyFrom(const CreatePlayerCoreRespMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.CreatePlayerCoreRespMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerCoreRespMessage::IsInitialized() const {
  return true;
}

void CreatePlayerCoreRespMessage::InternalSwap(CreatePlayerCoreRespMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePlayerCoreRespMessage, is_suceess_)
      + sizeof(CreatePlayerCoreRespMessage::is_suceess_)
      - PROTOBUF_FIELD_OFFSET(CreatePlayerCoreRespMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePlayerCoreRespMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[3]);
}

// ===================================================================

class InitPlayerCoreMessage::_Internal {
 public:
};

InitPlayerCoreMessage::InitPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.InitPlayerCoreMessage)
}
InitPlayerCoreMessage::InitPlayerCoreMessage(const InitPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&codec_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(codec_type_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.InitPlayerCoreMessage)
}

inline void InitPlayerCoreMessage::SharedCtor() {
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&codec_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(codec_type_));
}

InitPlayerCoreMessage::~InitPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.InitPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.Destroy();
  file_path_.Destroy();
}

void InitPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.InitPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  file_path_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&codec_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(codec_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.InitPlayerCoreMessage.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.InitPlayerCoreMessage.file_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_local = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 placeholder_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          placeholder_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 media_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          media_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_audio_mute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          is_audio_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 video_surface = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          video_surface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float audio_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          audio_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 is_repeat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          is_repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed_ratio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 max_frame_width = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          max_frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_frame_height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          max_frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 codec_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          codec_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 decoder_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          decoder_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.InitPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.InitPlayerCoreMessage.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // string file_path = 3;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.InitPlayerCoreMessage.file_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_path(), target);
  }

  // int64 file_size = 4;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_file_size(), target);
  }

  // bool is_local = 5;
  if (this->_internal_is_local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_local(), target);
  }

  // int32 placeholder_6 = 6;
  if (this->_internal_placeholder_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_placeholder_6(), target);
  }

  // int64 media_id = 7;
  if (this->_internal_media_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_media_id(), target);
  }

  // bool is_audio_mute = 8;
  if (this->_internal_is_audio_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_audio_mute(), target);
  }

  // int64 video_surface = 9;
  if (this->_internal_video_surface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_video_surface(), target);
  }

  // float audio_volume = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_audio_volume = this->_internal_audio_volume();
  uint32_t raw_audio_volume;
  memcpy(&raw_audio_volume, &tmp_audio_volume, sizeof(tmp_audio_volume));
  if (raw_audio_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_audio_volume(), target);
  }

  // int32 is_repeat = 11;
  if (this->_internal_is_repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_is_repeat(), target);
  }

  // float speed_ratio = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_ratio = this->_internal_speed_ratio();
  uint32_t raw_speed_ratio;
  memcpy(&raw_speed_ratio, &tmp_speed_ratio, sizeof(tmp_speed_ratio));
  if (raw_speed_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_speed_ratio(), target);
  }

  // int32 max_frame_width = 13;
  if (this->_internal_max_frame_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_frame_width(), target);
  }

  // int32 max_frame_height = 14;
  if (this->_internal_max_frame_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_frame_height(), target);
  }

  // int32 codec_type = 15;
  if (this->_internal_codec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_codec_type(), target);
  }

  // int64 decoder_type = 16;
  if (this->_internal_decoder_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_decoder_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.InitPlayerCoreMessage)
  return target;
}

size_t InitPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.InitPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_path = 3;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 placeholder_6 = 6;
  if (this->_internal_placeholder_6() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_placeholder_6());
  }

  // int64 file_size = 4;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size());
  }

  // int64 media_id = 7;
  if (this->_internal_media_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_media_id());
  }

  // bool is_local = 5;
  if (this->_internal_is_local() != 0) {
    total_size += 1 + 1;
  }

  // bool is_audio_mute = 8;
  if (this->_internal_is_audio_mute() != 0) {
    total_size += 1 + 1;
  }

  // float audio_volume = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_audio_volume = this->_internal_audio_volume();
  uint32_t raw_audio_volume;
  memcpy(&raw_audio_volume, &tmp_audio_volume, sizeof(tmp_audio_volume));
  if (raw_audio_volume != 0) {
    total_size += 1 + 4;
  }

  // int64 video_surface = 9;
  if (this->_internal_video_surface() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_video_surface());
  }

  // int32 is_repeat = 11;
  if (this->_internal_is_repeat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_repeat());
  }

  // float speed_ratio = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_ratio = this->_internal_speed_ratio();
  uint32_t raw_speed_ratio;
  memcpy(&raw_speed_ratio, &tmp_speed_ratio, sizeof(tmp_speed_ratio));
  if (raw_speed_ratio != 0) {
    total_size += 1 + 4;
  }

  // int32 max_frame_width = 13;
  if (this->_internal_max_frame_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_frame_width());
  }

  // int32 max_frame_height = 14;
  if (this->_internal_max_frame_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_frame_height());
  }

  // int64 decoder_type = 16;
  if (this->_internal_decoder_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_decoder_type());
  }

  // int32 codec_type = 15;
  if (this->_internal_codec_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_codec_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void InitPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const InitPlayerCoreMessage &>(from));
}


void InitPlayerCoreMessage::MergeFrom(const InitPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.InitPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_placeholder_6() != 0) {
    _internal_set_placeholder_6(from._internal_placeholder_6());
  }
  if (from._internal_file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_media_id() != 0) {
    _internal_set_media_id(from._internal_media_id());
  }
  if (from._internal_is_local() != 0) {
    _internal_set_is_local(from._internal_is_local());
  }
  if (from._internal_is_audio_mute() != 0) {
    _internal_set_is_audio_mute(from._internal_is_audio_mute());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_audio_volume = from._internal_audio_volume();
  uint32_t raw_audio_volume;
  memcpy(&raw_audio_volume, &tmp_audio_volume, sizeof(tmp_audio_volume));
  if (raw_audio_volume != 0) {
    _internal_set_audio_volume(from._internal_audio_volume());
  }
  if (from._internal_video_surface() != 0) {
    _internal_set_video_surface(from._internal_video_surface());
  }
  if (from._internal_is_repeat() != 0) {
    _internal_set_is_repeat(from._internal_is_repeat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_ratio = from._internal_speed_ratio();
  uint32_t raw_speed_ratio;
  memcpy(&raw_speed_ratio, &tmp_speed_ratio, sizeof(tmp_speed_ratio));
  if (raw_speed_ratio != 0) {
    _internal_set_speed_ratio(from._internal_speed_ratio());
  }
  if (from._internal_max_frame_width() != 0) {
    _internal_set_max_frame_width(from._internal_max_frame_width());
  }
  if (from._internal_max_frame_height() != 0) {
    _internal_set_max_frame_height(from._internal_max_frame_height());
  }
  if (from._internal_decoder_type() != 0) {
    _internal_set_decoder_type(from._internal_decoder_type());
  }
  if (from._internal_codec_type() != 0) {
    _internal_set_codec_type(from._internal_codec_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitPlayerCoreMessage::CopyFrom(const InitPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.InitPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitPlayerCoreMessage::IsInitialized() const {
  return true;
}

void InitPlayerCoreMessage::InternalSwap(InitPlayerCoreMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitPlayerCoreMessage, codec_type_)
      + sizeof(InitPlayerCoreMessage::codec_type_)
      - PROTOBUF_FIELD_OFFSET(InitPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[4]);
}

// ===================================================================

class InfoPlayerCoreMessage::_Internal {
 public:
};

InfoPlayerCoreMessage::InfoPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.InfoPlayerCoreMessage)
}
InfoPlayerCoreMessage::InfoPlayerCoreMessage(const InfoPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_2_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(unknown_2_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.InfoPlayerCoreMessage)
}

inline void InfoPlayerCoreMessage::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unknown_2_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(unknown_2_));
}

InfoPlayerCoreMessage::~InfoPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.InfoPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
}

void InfoPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.InfoPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_2_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(unknown_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.InfoPlayerCoreMessage.type"));
        } else
          goto handle_unusual;
        continue;
      // int32 arg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unknown_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          unknown_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.InfoPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.InfoPlayerCoreMessage.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // int32 arg = 3;
  if (this->_internal_arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_arg(), target);
  }

  // int32 unknown_2 = 4;
  if (this->_internal_unknown_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_unknown_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.InfoPlayerCoreMessage)
  return target;
}

size_t InfoPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.InfoPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 arg = 3;
  if (this->_internal_arg() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arg());
  }

  // int32 unknown_2 = 4;
  if (this->_internal_unknown_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InfoPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void InfoPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InfoPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const InfoPlayerCoreMessage &>(from));
}


void InfoPlayerCoreMessage::MergeFrom(const InfoPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.InfoPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
  if (from._internal_unknown_2() != 0) {
    _internal_set_unknown_2(from._internal_unknown_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoPlayerCoreMessage::CopyFrom(const InfoPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.InfoPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoPlayerCoreMessage::IsInitialized() const {
  return true;
}

void InfoPlayerCoreMessage::InternalSwap(InfoPlayerCoreMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoPlayerCoreMessage, unknown_2_)
      + sizeof(InfoPlayerCoreMessage::unknown_2_)
      - PROTOBUF_FIELD_OFFSET(InfoPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[5]);
}

// ===================================================================

class PlayerIdMessage::_Internal {
 public:
};

PlayerIdMessage::PlayerIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.PlayerIdMessage)
}
PlayerIdMessage::PlayerIdMessage(const PlayerIdMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:player_protobuf.PlayerIdMessage)
}

inline void PlayerIdMessage::SharedCtor() {
player_id_ = 0;
}

PlayerIdMessage::~PlayerIdMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.PlayerIdMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerIdMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerIdMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerIdMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.PlayerIdMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerIdMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerIdMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.PlayerIdMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.PlayerIdMessage)
  return target;
}

size_t PlayerIdMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.PlayerIdMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerIdMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerIdMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerIdMessage::GetClassData() const { return &_class_data_; }

void PlayerIdMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerIdMessage *>(to)->MergeFrom(
      static_cast<const PlayerIdMessage &>(from));
}


void PlayerIdMessage::MergeFrom(const PlayerIdMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.PlayerIdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerIdMessage::CopyFrom(const PlayerIdMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.PlayerIdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIdMessage::IsInitialized() const {
  return true;
}

void PlayerIdMessage::InternalSwap(PlayerIdMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerIdMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[6]);
}

// ===================================================================

class CurrentPositionMsMessage::_Internal {
 public:
};

CurrentPositionMsMessage::CurrentPositionMsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.CurrentPositionMsMessage)
}
CurrentPositionMsMessage::CurrentPositionMsMessage(const CurrentPositionMsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unknown_ = from.unknown_;
  // @@protoc_insertion_point(copy_constructor:player_protobuf.CurrentPositionMsMessage)
}

inline void CurrentPositionMsMessage::SharedCtor() {
unknown_ = 0;
}

CurrentPositionMsMessage::~CurrentPositionMsMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.CurrentPositionMsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentPositionMsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrentPositionMsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentPositionMsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.CurrentPositionMsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unknown_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentPositionMsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unknown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentPositionMsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.CurrentPositionMsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unknown = 1;
  if (this->_internal_unknown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.CurrentPositionMsMessage)
  return target;
}

size_t CurrentPositionMsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.CurrentPositionMsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unknown = 1;
  if (this->_internal_unknown() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unknown());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentPositionMsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentPositionMsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentPositionMsMessage::GetClassData() const { return &_class_data_; }

void CurrentPositionMsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentPositionMsMessage *>(to)->MergeFrom(
      static_cast<const CurrentPositionMsMessage &>(from));
}


void CurrentPositionMsMessage::MergeFrom(const CurrentPositionMsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.CurrentPositionMsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unknown() != 0) {
    _internal_set_unknown(from._internal_unknown());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentPositionMsMessage::CopyFrom(const CurrentPositionMsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.CurrentPositionMsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionMsMessage::IsInitialized() const {
  return true;
}

void CurrentPositionMsMessage::InternalSwap(CurrentPositionMsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(unknown_, other->unknown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentPositionMsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[7]);
}

// ===================================================================

class CurrentPositionMsInfo_MsInfo::_Internal {
 public:
};

CurrentPositionMsInfo_MsInfo::CurrentPositionMsInfo_MsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.CurrentPositionMsInfo.MsInfo)
}
CurrentPositionMsInfo_MsInfo::CurrentPositionMsInfo_MsInfo(const CurrentPositionMsInfo_MsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.CurrentPositionMsInfo.MsInfo)
}

inline void CurrentPositionMsInfo_MsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(pos_));
}

CurrentPositionMsInfo_MsInfo::~CurrentPositionMsInfo_MsInfo() {
  // @@protoc_insertion_point(destructor:player_protobuf.CurrentPositionMsInfo.MsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentPositionMsInfo_MsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrentPositionMsInfo_MsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentPositionMsInfo_MsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.CurrentPositionMsInfo.MsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentPositionMsInfo_MsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentPositionMsInfo_MsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.CurrentPositionMsInfo.MsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 pos = 2;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.CurrentPositionMsInfo.MsInfo)
  return target;
}

size_t CurrentPositionMsInfo_MsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.CurrentPositionMsInfo.MsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 pos = 2;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentPositionMsInfo_MsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentPositionMsInfo_MsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentPositionMsInfo_MsInfo::GetClassData() const { return &_class_data_; }

void CurrentPositionMsInfo_MsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentPositionMsInfo_MsInfo *>(to)->MergeFrom(
      static_cast<const CurrentPositionMsInfo_MsInfo &>(from));
}


void CurrentPositionMsInfo_MsInfo::MergeFrom(const CurrentPositionMsInfo_MsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.CurrentPositionMsInfo.MsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentPositionMsInfo_MsInfo::CopyFrom(const CurrentPositionMsInfo_MsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.CurrentPositionMsInfo.MsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionMsInfo_MsInfo::IsInitialized() const {
  return true;
}

void CurrentPositionMsInfo_MsInfo::InternalSwap(CurrentPositionMsInfo_MsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentPositionMsInfo_MsInfo, pos_)
      + sizeof(CurrentPositionMsInfo_MsInfo::pos_)
      - PROTOBUF_FIELD_OFFSET(CurrentPositionMsInfo_MsInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentPositionMsInfo_MsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[8]);
}

// ===================================================================

class CurrentPositionMsInfo::_Internal {
 public:
};

CurrentPositionMsInfo::CurrentPositionMsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ms_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.CurrentPositionMsInfo)
}
CurrentPositionMsInfo::CurrentPositionMsInfo(const CurrentPositionMsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ms_info_(from.ms_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:player_protobuf.CurrentPositionMsInfo)
}

inline void CurrentPositionMsInfo::SharedCtor() {
}

CurrentPositionMsInfo::~CurrentPositionMsInfo() {
  // @@protoc_insertion_point(destructor:player_protobuf.CurrentPositionMsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentPositionMsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrentPositionMsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentPositionMsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.CurrentPositionMsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ms_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentPositionMsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes ms_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ms_info();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentPositionMsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.CurrentPositionMsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes ms_info = 1;
  for (int i = 0, n = this->_internal_ms_info_size(); i < n; i++) {
    const auto& s = this->_internal_ms_info(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.CurrentPositionMsInfo)
  return target;
}

size_t CurrentPositionMsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.CurrentPositionMsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ms_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ms_info_.size());
  for (int i = 0, n = ms_info_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ms_info_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentPositionMsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentPositionMsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentPositionMsInfo::GetClassData() const { return &_class_data_; }

void CurrentPositionMsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentPositionMsInfo *>(to)->MergeFrom(
      static_cast<const CurrentPositionMsInfo &>(from));
}


void CurrentPositionMsInfo::MergeFrom(const CurrentPositionMsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.CurrentPositionMsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ms_info_.MergeFrom(from.ms_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentPositionMsInfo::CopyFrom(const CurrentPositionMsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.CurrentPositionMsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionMsInfo::IsInitialized() const {
  return true;
}

void CurrentPositionMsInfo::InternalSwap(CurrentPositionMsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ms_info_.InternalSwap(&other->ms_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentPositionMsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[9]);
}

// ===================================================================

class ResizePlayerCoreMessage::_Internal {
 public:
};

ResizePlayerCoreMessage::ResizePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.ResizePlayerCoreMessage)
}
ResizePlayerCoreMessage::ResizePlayerCoreMessage(const ResizePlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_height_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(new_height_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.ResizePlayerCoreMessage)
}

inline void ResizePlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_height_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(new_height_));
}

ResizePlayerCoreMessage::~ResizePlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.ResizePlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResizePlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResizePlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResizePlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.ResizePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_height_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(new_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizePlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 new_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          new_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 new_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          new_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResizePlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.ResizePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 new_width = 2;
  if (this->_internal_new_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_width(), target);
  }

  // int32 new_height = 3;
  if (this->_internal_new_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_new_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.ResizePlayerCoreMessage)
  return target;
}

size_t ResizePlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.ResizePlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 new_width = 2;
  if (this->_internal_new_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_width());
  }

  // int32 new_height = 3;
  if (this->_internal_new_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizePlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResizePlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizePlayerCoreMessage::GetClassData() const { return &_class_data_; }

void ResizePlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResizePlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const ResizePlayerCoreMessage &>(from));
}


void ResizePlayerCoreMessage::MergeFrom(const ResizePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.ResizePlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_new_width() != 0) {
    _internal_set_new_width(from._internal_new_width());
  }
  if (from._internal_new_height() != 0) {
    _internal_set_new_height(from._internal_new_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResizePlayerCoreMessage::CopyFrom(const ResizePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.ResizePlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizePlayerCoreMessage::IsInitialized() const {
  return true;
}

void ResizePlayerCoreMessage::InternalSwap(ResizePlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizePlayerCoreMessage, new_height_)
      + sizeof(ResizePlayerCoreMessage::new_height_)
      - PROTOBUF_FIELD_OFFSET(ResizePlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizePlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[10]);
}

// ===================================================================

class VideoSizeChangedPlayerCoreMessage::_Internal {
 public:
};

VideoSizeChangedPlayerCoreMessage::VideoSizeChangedPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.VideoSizeChangedPlayerCoreMessage)
}
VideoSizeChangedPlayerCoreMessage::VideoSizeChangedPlayerCoreMessage(const VideoSizeChangedPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&org_height_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(org_height_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.VideoSizeChangedPlayerCoreMessage)
}

inline void VideoSizeChangedPlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&org_height_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(org_height_));
}

VideoSizeChangedPlayerCoreMessage::~VideoSizeChangedPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSizeChangedPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoSizeChangedPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoSizeChangedPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&org_height_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(org_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoSizeChangedPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 org_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          org_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 org_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          org_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoSizeChangedPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 org_width = 2;
  if (this->_internal_org_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_org_width(), target);
  }

  // int32 org_height = 3;
  if (this->_internal_org_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_org_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  return target;
}

size_t VideoSizeChangedPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 org_width = 2;
  if (this->_internal_org_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_org_width());
  }

  // int32 org_height = 3;
  if (this->_internal_org_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_org_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoSizeChangedPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoSizeChangedPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoSizeChangedPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void VideoSizeChangedPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoSizeChangedPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const VideoSizeChangedPlayerCoreMessage &>(from));
}


void VideoSizeChangedPlayerCoreMessage::MergeFrom(const VideoSizeChangedPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_org_width() != 0) {
    _internal_set_org_width(from._internal_org_width());
  }
  if (from._internal_org_height() != 0) {
    _internal_set_org_height(from._internal_org_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoSizeChangedPlayerCoreMessage::CopyFrom(const VideoSizeChangedPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.VideoSizeChangedPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSizeChangedPlayerCoreMessage::IsInitialized() const {
  return true;
}

void VideoSizeChangedPlayerCoreMessage::InternalSwap(VideoSizeChangedPlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSizeChangedPlayerCoreMessage, org_height_)
      + sizeof(VideoSizeChangedPlayerCoreMessage::org_height_)
      - PROTOBUF_FIELD_OFFSET(VideoSizeChangedPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoSizeChangedPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[11]);
}

// ===================================================================

class PreparePlayerCoreMessage::_Internal {
 public:
};

PreparePlayerCoreMessage::PreparePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.PreparePlayerCoreMessage)
}
PreparePlayerCoreMessage::PreparePlayerCoreMessage(const PreparePlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.PreparePlayerCoreMessage)
}

inline void PreparePlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(duration_));
}

PreparePlayerCoreMessage::~PreparePlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.PreparePlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreparePlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreparePlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreparePlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.PreparePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreparePlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreparePlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.PreparePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.PreparePlayerCoreMessage)
  return target;
}

size_t PreparePlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.PreparePlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreparePlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreparePlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreparePlayerCoreMessage::GetClassData() const { return &_class_data_; }

void PreparePlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreparePlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const PreparePlayerCoreMessage &>(from));
}


void PreparePlayerCoreMessage::MergeFrom(const PreparePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.PreparePlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreparePlayerCoreMessage::CopyFrom(const PreparePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.PreparePlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreparePlayerCoreMessage::IsInitialized() const {
  return true;
}

void PreparePlayerCoreMessage::InternalSwap(PreparePlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreparePlayerCoreMessage, duration_)
      + sizeof(PreparePlayerCoreMessage::duration_)
      - PROTOBUF_FIELD_OFFSET(PreparePlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreparePlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[12]);
}

// ===================================================================

class StatePlayerCoreMessage::_Internal {
 public:
};

StatePlayerCoreMessage::StatePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.StatePlayerCoreMessage)
}
StatePlayerCoreMessage::StatePlayerCoreMessage(const StatePlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.StatePlayerCoreMessage)
}

inline void StatePlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(state_));
}

StatePlayerCoreMessage::~StatePlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.StatePlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatePlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatePlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatePlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.StatePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatePlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatePlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.StatePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.StatePlayerCoreMessage)
  return target;
}

size_t StatePlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.StatePlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatePlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatePlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatePlayerCoreMessage::GetClassData() const { return &_class_data_; }

void StatePlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatePlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const StatePlayerCoreMessage &>(from));
}


void StatePlayerCoreMessage::MergeFrom(const StatePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.StatePlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatePlayerCoreMessage::CopyFrom(const StatePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.StatePlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatePlayerCoreMessage::IsInitialized() const {
  return true;
}

void StatePlayerCoreMessage::InternalSwap(StatePlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatePlayerCoreMessage, state_)
      + sizeof(StatePlayerCoreMessage::state_)
      - PROTOBUF_FIELD_OFFSET(StatePlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatePlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[13]);
}

// ===================================================================

class AudioMutePlayerCoreMessage::_Internal {
 public:
};

AudioMutePlayerCoreMessage::AudioMutePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.AudioMutePlayerCoreMessage)
}
AudioMutePlayerCoreMessage::AudioMutePlayerCoreMessage(const AudioMutePlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_audio_mute_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_audio_mute_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.AudioMutePlayerCoreMessage)
}

inline void AudioMutePlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_audio_mute_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_audio_mute_));
}

AudioMutePlayerCoreMessage::~AudioMutePlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.AudioMutePlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioMutePlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioMutePlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioMutePlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.AudioMutePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_audio_mute_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(is_audio_mute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioMutePlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_audio_mute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_audio_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioMutePlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.AudioMutePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // bool is_audio_mute = 2;
  if (this->_internal_is_audio_mute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_audio_mute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.AudioMutePlayerCoreMessage)
  return target;
}

size_t AudioMutePlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.AudioMutePlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // bool is_audio_mute = 2;
  if (this->_internal_is_audio_mute() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioMutePlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioMutePlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioMutePlayerCoreMessage::GetClassData() const { return &_class_data_; }

void AudioMutePlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioMutePlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const AudioMutePlayerCoreMessage &>(from));
}


void AudioMutePlayerCoreMessage::MergeFrom(const AudioMutePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.AudioMutePlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_is_audio_mute() != 0) {
    _internal_set_is_audio_mute(from._internal_is_audio_mute());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioMutePlayerCoreMessage::CopyFrom(const AudioMutePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.AudioMutePlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioMutePlayerCoreMessage::IsInitialized() const {
  return true;
}

void AudioMutePlayerCoreMessage::InternalSwap(AudioMutePlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioMutePlayerCoreMessage, is_audio_mute_)
      + sizeof(AudioMutePlayerCoreMessage::is_audio_mute_)
      - PROTOBUF_FIELD_OFFSET(AudioMutePlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioMutePlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[14]);
}

// ===================================================================

class SeekToPlayerCoreMessage::_Internal {
 public:
};

SeekToPlayerCoreMessage::SeekToPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.SeekToPlayerCoreMessage)
}
SeekToPlayerCoreMessage::SeekToPlayerCoreMessage(const SeekToPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_ms_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(pos_ms_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.SeekToPlayerCoreMessage)
}

inline void SeekToPlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_ms_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(pos_ms_));
}

SeekToPlayerCoreMessage::~SeekToPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.SeekToPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeekToPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeekToPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SeekToPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.SeekToPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_ms_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(pos_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeekToPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pos_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeekToPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.SeekToPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 pos_ms = 2;
  if (this->_internal_pos_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pos_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.SeekToPlayerCoreMessage)
  return target;
}

size_t SeekToPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.SeekToPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 pos_ms = 2;
  if (this->_internal_pos_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeekToPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SeekToPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeekToPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void SeekToPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SeekToPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const SeekToPlayerCoreMessage &>(from));
}


void SeekToPlayerCoreMessage::MergeFrom(const SeekToPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.SeekToPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_pos_ms() != 0) {
    _internal_set_pos_ms(from._internal_pos_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeekToPlayerCoreMessage::CopyFrom(const SeekToPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.SeekToPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekToPlayerCoreMessage::IsInitialized() const {
  return true;
}

void SeekToPlayerCoreMessage::InternalSwap(SeekToPlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeekToPlayerCoreMessage, pos_ms_)
      + sizeof(SeekToPlayerCoreMessage::pos_ms_)
      - PROTOBUF_FIELD_OFFSET(SeekToPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekToPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[15]);
}

// ===================================================================

class VideoSurfaceMessage::_Internal {
 public:
};

VideoSurfaceMessage::VideoSurfaceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.VideoSurfaceMessage)
}
VideoSurfaceMessage::VideoSurfaceMessage(const VideoSurfaceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(window_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.VideoSurfaceMessage)
}

inline void VideoSurfaceMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(window_));
}

VideoSurfaceMessage::~VideoSurfaceMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.VideoSurfaceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSurfaceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoSurfaceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoSurfaceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.VideoSurfaceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(window_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoSurfaceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoSurfaceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.VideoSurfaceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 window = 2;
  if (this->_internal_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_window(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.VideoSurfaceMessage)
  return target;
}

size_t VideoSurfaceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.VideoSurfaceMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 window = 2;
  if (this->_internal_window() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_window());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoSurfaceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoSurfaceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoSurfaceMessage::GetClassData() const { return &_class_data_; }

void VideoSurfaceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoSurfaceMessage *>(to)->MergeFrom(
      static_cast<const VideoSurfaceMessage &>(from));
}


void VideoSurfaceMessage::MergeFrom(const VideoSurfaceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.VideoSurfaceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_window() != 0) {
    _internal_set_window(from._internal_window());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoSurfaceMessage::CopyFrom(const VideoSurfaceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.VideoSurfaceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSurfaceMessage::IsInitialized() const {
  return true;
}

void VideoSurfaceMessage::InternalSwap(VideoSurfaceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSurfaceMessage, window_)
      + sizeof(VideoSurfaceMessage::window_)
      - PROTOBUF_FIELD_OFFSET(VideoSurfaceMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoSurfaceMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[16]);
}

// ===================================================================

class AudioVolumePlayerCoreMessage::_Internal {
 public:
};

AudioVolumePlayerCoreMessage::AudioVolumePlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.AudioVolumePlayerCoreMessage)
}
AudioVolumePlayerCoreMessage::AudioVolumePlayerCoreMessage(const AudioVolumePlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_volume_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(audio_volume_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.AudioVolumePlayerCoreMessage)
}

inline void AudioVolumePlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_volume_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(audio_volume_));
}

AudioVolumePlayerCoreMessage::~AudioVolumePlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.AudioVolumePlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioVolumePlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioVolumePlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioVolumePlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.AudioVolumePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_volume_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(audio_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioVolumePlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float audio_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          audio_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioVolumePlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.AudioVolumePlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // float audio_volume = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_audio_volume = this->_internal_audio_volume();
  uint32_t raw_audio_volume;
  memcpy(&raw_audio_volume, &tmp_audio_volume, sizeof(tmp_audio_volume));
  if (raw_audio_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_audio_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.AudioVolumePlayerCoreMessage)
  return target;
}

size_t AudioVolumePlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.AudioVolumePlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // float audio_volume = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_audio_volume = this->_internal_audio_volume();
  uint32_t raw_audio_volume;
  memcpy(&raw_audio_volume, &tmp_audio_volume, sizeof(tmp_audio_volume));
  if (raw_audio_volume != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioVolumePlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioVolumePlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioVolumePlayerCoreMessage::GetClassData() const { return &_class_data_; }

void AudioVolumePlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioVolumePlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const AudioVolumePlayerCoreMessage &>(from));
}


void AudioVolumePlayerCoreMessage::MergeFrom(const AudioVolumePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.AudioVolumePlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_audio_volume = from._internal_audio_volume();
  uint32_t raw_audio_volume;
  memcpy(&raw_audio_volume, &tmp_audio_volume, sizeof(tmp_audio_volume));
  if (raw_audio_volume != 0) {
    _internal_set_audio_volume(from._internal_audio_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioVolumePlayerCoreMessage::CopyFrom(const AudioVolumePlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.AudioVolumePlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioVolumePlayerCoreMessage::IsInitialized() const {
  return true;
}

void AudioVolumePlayerCoreMessage::InternalSwap(AudioVolumePlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioVolumePlayerCoreMessage, audio_volume_)
      + sizeof(AudioVolumePlayerCoreMessage::audio_volume_)
      - PROTOBUF_FIELD_OFFSET(AudioVolumePlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioVolumePlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[17]);
}

// ===================================================================

class RepeatPlayerCoreMessage::_Internal {
 public:
};

RepeatPlayerCoreMessage::RepeatPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.RepeatPlayerCoreMessage)
}
RepeatPlayerCoreMessage::RepeatPlayerCoreMessage(const RepeatPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_repeat_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_repeat_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.RepeatPlayerCoreMessage)
}

inline void RepeatPlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_repeat_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_repeat_));
}

RepeatPlayerCoreMessage::~RepeatPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.RepeatPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepeatPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepeatPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepeatPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.RepeatPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_repeat_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(is_repeat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepeatPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_repeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.RepeatPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 is_repeat = 2;
  if (this->_internal_is_repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.RepeatPlayerCoreMessage)
  return target;
}

size_t RepeatPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.RepeatPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 is_repeat = 2;
  if (this->_internal_is_repeat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_repeat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepeatPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepeatPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepeatPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void RepeatPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepeatPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const RepeatPlayerCoreMessage &>(from));
}


void RepeatPlayerCoreMessage::MergeFrom(const RepeatPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.RepeatPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_is_repeat() != 0) {
    _internal_set_is_repeat(from._internal_is_repeat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepeatPlayerCoreMessage::CopyFrom(const RepeatPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.RepeatPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatPlayerCoreMessage::IsInitialized() const {
  return true;
}

void RepeatPlayerCoreMessage::InternalSwap(RepeatPlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RepeatPlayerCoreMessage, is_repeat_)
      + sizeof(RepeatPlayerCoreMessage::is_repeat_)
      - PROTOBUF_FIELD_OFFSET(RepeatPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[18]);
}

// ===================================================================

class SpeedRatioPlayerCoreMessage::_Internal {
 public:
};

SpeedRatioPlayerCoreMessage::SpeedRatioPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.SpeedRatioPlayerCoreMessage)
}
SpeedRatioPlayerCoreMessage::SpeedRatioPlayerCoreMessage(const SpeedRatioPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_ratio_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(speed_ratio_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.SpeedRatioPlayerCoreMessage)
}

inline void SpeedRatioPlayerCoreMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_ratio_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(speed_ratio_));
}

SpeedRatioPlayerCoreMessage::~SpeedRatioPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.SpeedRatioPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedRatioPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedRatioPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedRatioPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.SpeedRatioPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_ratio_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(speed_ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedRatioPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedRatioPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.SpeedRatioPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // float speed_ratio = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_ratio = this->_internal_speed_ratio();
  uint32_t raw_speed_ratio;
  memcpy(&raw_speed_ratio, &tmp_speed_ratio, sizeof(tmp_speed_ratio));
  if (raw_speed_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.SpeedRatioPlayerCoreMessage)
  return target;
}

size_t SpeedRatioPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.SpeedRatioPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // float speed_ratio = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_ratio = this->_internal_speed_ratio();
  uint32_t raw_speed_ratio;
  memcpy(&raw_speed_ratio, &tmp_speed_ratio, sizeof(tmp_speed_ratio));
  if (raw_speed_ratio != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedRatioPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedRatioPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedRatioPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void SpeedRatioPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedRatioPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const SpeedRatioPlayerCoreMessage &>(from));
}


void SpeedRatioPlayerCoreMessage::MergeFrom(const SpeedRatioPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.SpeedRatioPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_ratio = from._internal_speed_ratio();
  uint32_t raw_speed_ratio;
  memcpy(&raw_speed_ratio, &tmp_speed_ratio, sizeof(tmp_speed_ratio));
  if (raw_speed_ratio != 0) {
    _internal_set_speed_ratio(from._internal_speed_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedRatioPlayerCoreMessage::CopyFrom(const SpeedRatioPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.SpeedRatioPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedRatioPlayerCoreMessage::IsInitialized() const {
  return true;
}

void SpeedRatioPlayerCoreMessage::InternalSwap(SpeedRatioPlayerCoreMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedRatioPlayerCoreMessage, speed_ratio_)
      + sizeof(SpeedRatioPlayerCoreMessage::speed_ratio_)
      - PROTOBUF_FIELD_OFFSET(SpeedRatioPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedRatioPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[19]);
}

// ===================================================================

class ReadyDataSourceCoreMessage::_Internal {
 public:
};

ReadyDataSourceCoreMessage::ReadyDataSourceCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.ReadyDataSourceCoreMessage)
}
ReadyDataSourceCoreMessage::ReadyDataSourceCoreMessage(const ReadyDataSourceCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&media_id_, &from.media_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&media_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.ReadyDataSourceCoreMessage)
}

inline void ReadyDataSourceCoreMessage::SharedCtor() {
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&media_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&media_id_)) + sizeof(player_id_));
}

ReadyDataSourceCoreMessage::~ReadyDataSourceCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.ReadyDataSourceCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadyDataSourceCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.Destroy();
  file_path_.Destroy();
}

void ReadyDataSourceCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadyDataSourceCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.ReadyDataSourceCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  file_path_.ClearToEmpty();
  ::memset(&media_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&media_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadyDataSourceCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.ReadyDataSourceCoreMessage.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.ReadyDataSourceCoreMessage.file_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 media_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          media_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadyDataSourceCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.ReadyDataSourceCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.ReadyDataSourceCoreMessage.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // string file_path = 3;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.ReadyDataSourceCoreMessage.file_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_path(), target);
  }

  // int64 media_id = 4;
  if (this->_internal_media_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_media_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.ReadyDataSourceCoreMessage)
  return target;
}

size_t ReadyDataSourceCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.ReadyDataSourceCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_path = 3;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int64 media_id = 4;
  if (this->_internal_media_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_media_id());
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadyDataSourceCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadyDataSourceCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadyDataSourceCoreMessage::GetClassData() const { return &_class_data_; }

void ReadyDataSourceCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadyDataSourceCoreMessage *>(to)->MergeFrom(
      static_cast<const ReadyDataSourceCoreMessage &>(from));
}


void ReadyDataSourceCoreMessage::MergeFrom(const ReadyDataSourceCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.ReadyDataSourceCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_media_id() != 0) {
    _internal_set_media_id(from._internal_media_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadyDataSourceCoreMessage::CopyFrom(const ReadyDataSourceCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.ReadyDataSourceCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyDataSourceCoreMessage::IsInitialized() const {
  return true;
}

void ReadyDataSourceCoreMessage::InternalSwap(ReadyDataSourceCoreMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadyDataSourceCoreMessage, player_id_)
      + sizeof(ReadyDataSourceCoreMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(ReadyDataSourceCoreMessage, media_id_)>(
          reinterpret_cast<char*>(&media_id_),
          reinterpret_cast<char*>(&other->media_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadyDataSourceCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[20]);
}

// ===================================================================

class DownloadDataSourceCoreMessage::_Internal {
 public:
};

DownloadDataSourceCoreMessage::DownloadDataSourceCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.DownloadDataSourceCoreMessage)
}
DownloadDataSourceCoreMessage::DownloadDataSourceCoreMessage(const DownloadDataSourceCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.DownloadDataSourceCoreMessage)
}

inline void DownloadDataSourceCoreMessage::SharedCtor() {
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(player_id_));
}

DownloadDataSourceCoreMessage::~DownloadDataSourceCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.DownloadDataSourceCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadDataSourceCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.Destroy();
  file_path_.Destroy();
}

void DownloadDataSourceCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadDataSourceCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.DownloadDataSourceCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  file_path_.ClearToEmpty();
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadDataSourceCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.DownloadDataSourceCoreMessage.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.DownloadDataSourceCoreMessage.file_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 media_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          media_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadDataSourceCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.DownloadDataSourceCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.DownloadDataSourceCoreMessage.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // string file_path = 3;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.DownloadDataSourceCoreMessage.file_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_path(), target);
  }

  // int64 file_size = 4;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_file_size(), target);
  }

  // int64 media_id = 5;
  if (this->_internal_media_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_media_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.DownloadDataSourceCoreMessage)
  return target;
}

size_t DownloadDataSourceCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.DownloadDataSourceCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_path = 3;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int64 file_size = 4;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size());
  }

  // int64 media_id = 5;
  if (this->_internal_media_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_media_id());
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadDataSourceCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadDataSourceCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadDataSourceCoreMessage::GetClassData() const { return &_class_data_; }

void DownloadDataSourceCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DownloadDataSourceCoreMessage *>(to)->MergeFrom(
      static_cast<const DownloadDataSourceCoreMessage &>(from));
}


void DownloadDataSourceCoreMessage::MergeFrom(const DownloadDataSourceCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.DownloadDataSourceCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_media_id() != 0) {
    _internal_set_media_id(from._internal_media_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadDataSourceCoreMessage::CopyFrom(const DownloadDataSourceCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.DownloadDataSourceCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDataSourceCoreMessage::IsInitialized() const {
  return true;
}

void DownloadDataSourceCoreMessage::InternalSwap(DownloadDataSourceCoreMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadDataSourceCoreMessage, player_id_)
      + sizeof(DownloadDataSourceCoreMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(DownloadDataSourceCoreMessage, file_size_)>(
          reinterpret_cast<char*>(&file_size_),
          reinterpret_cast<char*>(&other->file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadDataSourceCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[21]);
}

// ===================================================================

class ErrorPlayerCoreMessage::_Internal {
 public:
};

ErrorPlayerCoreMessage::ErrorPlayerCoreMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.ErrorPlayerCoreMessage)
}
ErrorPlayerCoreMessage::ErrorPlayerCoreMessage(const ErrorPlayerCoreMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(from._internal_error(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.ErrorPlayerCoreMessage)
}

inline void ErrorPlayerCoreMessage::SharedCtor() {
error_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(error_code_));
}

ErrorPlayerCoreMessage::~ErrorPlayerCoreMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.ErrorPlayerCoreMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorPlayerCoreMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.Destroy();
}

void ErrorPlayerCoreMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorPlayerCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.ErrorPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorPlayerCoreMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "player_protobuf.ErrorPlayerCoreMessage.error"));
        } else
          goto handle_unusual;
        continue;
      // int32 error_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          error_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorPlayerCoreMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.ErrorPlayerCoreMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "player_protobuf.ErrorPlayerCoreMessage.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // int32 error_type = 3;
  if (this->_internal_error_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_type(), target);
  }

  // int32 error_code = 4;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.ErrorPlayerCoreMessage)
  return target;
}

size_t ErrorPlayerCoreMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.ErrorPlayerCoreMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 error_type = 3;
  if (this->_internal_error_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_type());
  }

  // int32 error_code = 4;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorPlayerCoreMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrorPlayerCoreMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorPlayerCoreMessage::GetClassData() const { return &_class_data_; }

void ErrorPlayerCoreMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ErrorPlayerCoreMessage *>(to)->MergeFrom(
      static_cast<const ErrorPlayerCoreMessage &>(from));
}


void ErrorPlayerCoreMessage::MergeFrom(const ErrorPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.ErrorPlayerCoreMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_error_type() != 0) {
    _internal_set_error_type(from._internal_error_type());
  }
  if (from._internal_error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorPlayerCoreMessage::CopyFrom(const ErrorPlayerCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.ErrorPlayerCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorPlayerCoreMessage::IsInitialized() const {
  return true;
}

void ErrorPlayerCoreMessage::InternalSwap(ErrorPlayerCoreMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorPlayerCoreMessage, error_code_)
      + sizeof(ErrorPlayerCoreMessage::error_code_)
      - PROTOBUF_FIELD_OFFSET(ErrorPlayerCoreMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorPlayerCoreMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[22]);
}

// ===================================================================

class StartTaskProxyMessage::_Internal {
 public:
};

StartTaskProxyMessage::StartTaskProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.StartTaskProxyMessage)
}
StartTaskProxyMessage::StartTaskProxyMessage(const StartTaskProxyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.StartTaskProxyMessage)
}

inline void StartTaskProxyMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(player_id_));
}

StartTaskProxyMessage::~StartTaskProxyMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.StartTaskProxyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartTaskProxyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartTaskProxyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartTaskProxyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.StartTaskProxyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartTaskProxyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartTaskProxyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.StartTaskProxyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.StartTaskProxyMessage)
  return target;
}

size_t StartTaskProxyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.StartTaskProxyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartTaskProxyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartTaskProxyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartTaskProxyMessage::GetClassData() const { return &_class_data_; }

void StartTaskProxyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartTaskProxyMessage *>(to)->MergeFrom(
      static_cast<const StartTaskProxyMessage &>(from));
}


void StartTaskProxyMessage::MergeFrom(const StartTaskProxyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.StartTaskProxyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartTaskProxyMessage::CopyFrom(const StartTaskProxyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.StartTaskProxyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTaskProxyMessage::IsInitialized() const {
  return true;
}

void StartTaskProxyMessage::InternalSwap(StartTaskProxyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartTaskProxyMessage, player_id_)
      + sizeof(StartTaskProxyMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(StartTaskProxyMessage, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartTaskProxyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[23]);
}

// ===================================================================

class StartRequestProxyMessage::_Internal {
 public:
};

StartRequestProxyMessage::StartRequestProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.StartRequestProxyMessage)
}
StartRequestProxyMessage::StartRequestProxyMessage(const StartRequestProxyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_end_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(request_end_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.StartRequestProxyMessage)
}

inline void StartRequestProxyMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_end_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(request_end_));
}

StartRequestProxyMessage::~StartRequestProxyMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.StartRequestProxyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartRequestProxyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartRequestProxyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRequestProxyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.StartRequestProxyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_end_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(request_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRequestProxyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          request_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 request_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          request_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRequestProxyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.StartRequestProxyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // int32 request_start = 3;
  if (this->_internal_request_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_request_start(), target);
  }

  // int32 request_end = 4;
  if (this->_internal_request_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_request_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.StartRequestProxyMessage)
  return target;
}

size_t StartRequestProxyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.StartRequestProxyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 request_start = 3;
  if (this->_internal_request_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_start());
  }

  // int32 request_end = 4;
  if (this->_internal_request_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRequestProxyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRequestProxyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRequestProxyMessage::GetClassData() const { return &_class_data_; }

void StartRequestProxyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRequestProxyMessage *>(to)->MergeFrom(
      static_cast<const StartRequestProxyMessage &>(from));
}


void StartRequestProxyMessage::MergeFrom(const StartRequestProxyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.StartRequestProxyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_request_start() != 0) {
    _internal_set_request_start(from._internal_request_start());
  }
  if (from._internal_request_end() != 0) {
    _internal_set_request_end(from._internal_request_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRequestProxyMessage::CopyFrom(const StartRequestProxyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.StartRequestProxyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequestProxyMessage::IsInitialized() const {
  return true;
}

void StartRequestProxyMessage::InternalSwap(StartRequestProxyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartRequestProxyMessage, request_end_)
      + sizeof(StartRequestProxyMessage::request_end_)
      - PROTOBUF_FIELD_OFFSET(StartRequestProxyMessage, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRequestProxyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[24]);
}

// ===================================================================

class CloseRequestProxyMessage::_Internal {
 public:
};

CloseRequestProxyMessage::CloseRequestProxyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.CloseRequestProxyMessage)
}
CloseRequestProxyMessage::CloseRequestProxyMessage(const CloseRequestProxyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.CloseRequestProxyMessage)
}

inline void CloseRequestProxyMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(player_id_));
}

CloseRequestProxyMessage::~CloseRequestProxyMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.CloseRequestProxyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseRequestProxyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseRequestProxyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseRequestProxyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.CloseRequestProxyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseRequestProxyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseRequestProxyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.CloseRequestProxyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.CloseRequestProxyMessage)
  return target;
}

size_t CloseRequestProxyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.CloseRequestProxyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseRequestProxyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseRequestProxyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseRequestProxyMessage::GetClassData() const { return &_class_data_; }

void CloseRequestProxyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseRequestProxyMessage *>(to)->MergeFrom(
      static_cast<const CloseRequestProxyMessage &>(from));
}


void CloseRequestProxyMessage::MergeFrom(const CloseRequestProxyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.CloseRequestProxyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseRequestProxyMessage::CopyFrom(const CloseRequestProxyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.CloseRequestProxyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequestProxyMessage::IsInitialized() const {
  return true;
}

void CloseRequestProxyMessage::InternalSwap(CloseRequestProxyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseRequestProxyMessage, player_id_)
      + sizeof(CloseRequestProxyMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(CloseRequestProxyMessage, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRequestProxyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[25]);
}

// ===================================================================

class PollingDataProxyReqMessage::_Internal {
 public:
};

PollingDataProxyReqMessage::PollingDataProxyReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:player_protobuf.PollingDataProxyReqMessage)
}
PollingDataProxyReqMessage::PollingDataProxyReqMessage(const PollingDataProxyReqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_size_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(read_size_));
  // @@protoc_insertion_point(copy_constructor:player_protobuf.PollingDataProxyReqMessage)
}

inline void PollingDataProxyReqMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_size_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(read_size_));
}

PollingDataProxyReqMessage::~PollingDataProxyReqMessage() {
  // @@protoc_insertion_point(destructor:player_protobuf.PollingDataProxyReqMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollingDataProxyReqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PollingDataProxyReqMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PollingDataProxyReqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:player_protobuf.PollingDataProxyReqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_size_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(read_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollingDataProxyReqMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ready_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ready_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 download_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          download_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 read_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          read_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollingDataProxyReqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:player_protobuf.PollingDataProxyReqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // int32 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_offset(), target);
  }

  // int32 ready_size = 4;
  if (this->_internal_ready_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ready_size(), target);
  }

  // int32 download_size = 5;
  if (this->_internal_download_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_download_size(), target);
  }

  // int32 read_size = 6;
  if (this->_internal_read_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_read_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:player_protobuf.PollingDataProxyReqMessage)
  return target;
}

size_t PollingDataProxyReqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:player_protobuf.PollingDataProxyReqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 ready_size = 4;
  if (this->_internal_ready_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ready_size());
  }

  // int32 download_size = 5;
  if (this->_internal_download_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_download_size());
  }

  // int32 read_size = 6;
  if (this->_internal_read_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_read_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollingDataProxyReqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PollingDataProxyReqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollingDataProxyReqMessage::GetClassData() const { return &_class_data_; }

void PollingDataProxyReqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PollingDataProxyReqMessage *>(to)->MergeFrom(
      static_cast<const PollingDataProxyReqMessage &>(from));
}


void PollingDataProxyReqMessage::MergeFrom(const PollingDataProxyReqMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:player_protobuf.PollingDataProxyReqMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_ready_size() != 0) {
    _internal_set_ready_size(from._internal_ready_size());
  }
  if (from._internal_download_size() != 0) {
    _internal_set_download_size(from._internal_download_size());
  }
  if (from._internal_read_size() != 0) {
    _internal_set_read_size(from._internal_read_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollingDataProxyReqMessage::CopyFrom(const PollingDataProxyReqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:player_protobuf.PollingDataProxyReqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollingDataProxyReqMessage::IsInitialized() const {
  return true;
}

void PollingDataProxyReqMessage::InternalSwap(PollingDataProxyReqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PollingDataProxyReqMessage, read_size_)
      + sizeof(PollingDataProxyReqMessage::read_size_)
      - PROTOBUF_FIELD_OFFSET(PollingDataProxyReqMessage, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PollingDataProxyReqMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[26]);
}

// ===================================================================

class PollingDataProxyRespMessage::_Internal {
 public:
};

PollingDataProxyRespMessage::PollingDataProxyRespMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:player_protobuf.PollingDataProxyRespMessage)
}
PollingDataProxyRespMessage::PollingDataProxyRespMessage(const PollingDataProxyRespMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:player_protobuf.PollingDataProxyRespMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollingDataProxyRespMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollingDataProxyRespMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PollingDataProxyRespMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_5fprotobuf_2eproto_getter, &descriptor_table_player_5fprotobuf_2eproto_once,
      file_level_metadata_player_5fprotobuf_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace player_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::player_protobuf::InitReqMessage*
Arena::CreateMaybeMessage< ::player_protobuf::InitReqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::InitReqMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::InitRespMessage*
Arena::CreateMaybeMessage< ::player_protobuf::InitRespMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::InitRespMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::CreatePlayerCoreReqMessage*
Arena::CreateMaybeMessage< ::player_protobuf::CreatePlayerCoreReqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::CreatePlayerCoreReqMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::CreatePlayerCoreRespMessage*
Arena::CreateMaybeMessage< ::player_protobuf::CreatePlayerCoreRespMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::CreatePlayerCoreRespMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::InitPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::InitPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::InitPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::InfoPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::InfoPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::InfoPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::PlayerIdMessage*
Arena::CreateMaybeMessage< ::player_protobuf::PlayerIdMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::PlayerIdMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::CurrentPositionMsMessage*
Arena::CreateMaybeMessage< ::player_protobuf::CurrentPositionMsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::CurrentPositionMsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::CurrentPositionMsInfo_MsInfo*
Arena::CreateMaybeMessage< ::player_protobuf::CurrentPositionMsInfo_MsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::CurrentPositionMsInfo_MsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::CurrentPositionMsInfo*
Arena::CreateMaybeMessage< ::player_protobuf::CurrentPositionMsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::CurrentPositionMsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::ResizePlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::ResizePlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::ResizePlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::VideoSizeChangedPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::VideoSizeChangedPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::VideoSizeChangedPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::PreparePlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::PreparePlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::PreparePlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::StatePlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::StatePlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::StatePlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::AudioMutePlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::AudioMutePlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::AudioMutePlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::SeekToPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::SeekToPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::SeekToPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::VideoSurfaceMessage*
Arena::CreateMaybeMessage< ::player_protobuf::VideoSurfaceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::VideoSurfaceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::AudioVolumePlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::AudioVolumePlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::AudioVolumePlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::RepeatPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::RepeatPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::RepeatPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::SpeedRatioPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::SpeedRatioPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::SpeedRatioPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::ReadyDataSourceCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::ReadyDataSourceCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::ReadyDataSourceCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::DownloadDataSourceCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::DownloadDataSourceCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::DownloadDataSourceCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::ErrorPlayerCoreMessage*
Arena::CreateMaybeMessage< ::player_protobuf::ErrorPlayerCoreMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::ErrorPlayerCoreMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::StartTaskProxyMessage*
Arena::CreateMaybeMessage< ::player_protobuf::StartTaskProxyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::StartTaskProxyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::StartRequestProxyMessage*
Arena::CreateMaybeMessage< ::player_protobuf::StartRequestProxyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::StartRequestProxyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::CloseRequestProxyMessage*
Arena::CreateMaybeMessage< ::player_protobuf::CloseRequestProxyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::CloseRequestProxyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::PollingDataProxyReqMessage*
Arena::CreateMaybeMessage< ::player_protobuf::PollingDataProxyReqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::PollingDataProxyReqMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::player_protobuf::PollingDataProxyRespMessage*
Arena::CreateMaybeMessage< ::player_protobuf::PollingDataProxyRespMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::player_protobuf::PollingDataProxyRespMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
